<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『题解』Luogu - UVA10193 All You Need Is Love</title>
      <link href="/2022/05/17/uva10193-solution/"/>
      <url>/2022/05/17/uva10193-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10193" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10193" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目翻译">题目翻译</h3><p>一个人给出一个二进制字符串 $S_1$，机器再给出另一个字符串 $S_2$，若一直从 $S_1$ 和 $S_2$ 中分别减去若干个 $L$ 能正好为 $L$，则输出 <code>All you need is love!</code>，反之则输出 <code>Love is not all you need!</code>。</p><p><strong>“减法”指与十进制类似的在二进制中使用的减法运算。</strong></p><p>数据保证输入的二进制字符串不含有前导零。</p><h3 id="题目思路">题目思路</h3><p>将题意用通俗的语言表示：</p><p>判断将它们分别转化为十进制数后是否互质。</p><h3 id="题目解法">题目解法</h3><p>求最大公约数可以使用 C++ 标准库头文件中的 <code>__gcd()</code> 或使用自己手写的函数。</p><p><strong><code>bin2dec()</code> 函数的 <code>string</code> 类形参可加 <code>&amp;</code> 取地址符也可不加，具体可以参见 <a href="http://t.csdn.cn/Z3kVY">C++ 中 string 作为参数的传递（string 类型的引用）</a>。</strong></p><h3 id="代码实现">代码实现</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt; // 万能头using namespace std; // 引入 C++ 标准命名空间int n, a, b;string s1, s2;int bin2dec(const string &amp;s) &#123; // 模板int res = 0, cnt = 0; // 记得赋初值for (int i = (int)s.size() - 1; i &gt;= 0; i--) &#123; // 逆序遍历二进制字符串if (s[i] == '1') &#123; // 如果此位的二进制字符串为 1res += (int)pow(2, cnt); // 将进制的当前位数次幂加入十进制结果&#125;cnt++; // 下一个二进制字符串的位置&#125;return res; // 返回十进制结果&#125;int main() &#123;cin &gt;&gt; n;for (int i = 1; i &lt;= n; i++) &#123; // 建议此题不要使用 while (n--)cin &gt;&gt; s1 &gt;&gt; s2; // 输入二进制字符串a = bin2dec(s1); // 转换b = bin2dec(s2); // 同上cout &lt;&lt; &quot;Pair #&quot; &lt;&lt; i &lt;&lt; &quot;: &quot;; // 格式if (__gcd(a, b) != 1) &#123; // 判断是否互质cout &lt;&lt; &quot;All you need is love!&quot; &lt;&lt; endl;&#125; else &#123; // 反之cout &lt;&lt; &quot;Love is not all you need!&quot; &lt;&lt; endl;&#125;&#125;return 0; // 好习惯&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10193">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/05/17/uva10193-solution/">https://ren-yc.github.io/2022/05/17/uva10193-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11498 Division of Nlogonia</title>
      <link href="/2022/05/17/uva11498-solution/"/>
      <url>/2022/05/17/uva11498-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11498" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11498" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目翻译">题目翻译</h3><p>给定基准点的坐标和若干个点，请你输出它分别与基准点的位置关系。</p><ul><li><p>若点的位置与基准点在一条水平线或垂直线上，输出 <code>divisa</code>（即 $n = x$ 或 $m = y$）。</p></li><li><p>若点的位置在基准点的西北，输出 <code>NO</code>（即 $n &gt; x$ 且 $m &gt; y$）。</p></li><li><p>若点的位置在基准点的东北，输出 <code>NE</code>（即 $n &gt; x$ 且 $m &lt; y$）。</p></li><li><p>若点的位置在基准点的东南，输出 <code>SE</code>（即 $n &lt; x$ 且 $m &gt; y$）。</p></li><li><p>若点的位置在基准点的西南，输出 <code>SO</code>（即 $n &lt; x$ 且 $m &lt; y$）。</p></li></ul><p><strong>$k = 0$ 则结束输入。</strong></p><h3 id="题目思路">题目思路</h3><p>直接按照基准点与若个点的坐标值分别进行比较即可。</p><p>我们可以运用 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code> / <code>while (cin &gt;&gt; n)</code> 重复输入直到 EOF。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int k, n, m, x, y;int main() &#123;while (cin &gt;&gt; k) &#123; // 重复输入直到 EOFif (k == 0) &#123; // 判断 k 是否为 0break; // 跳出循环&#125;cin &gt;&gt; n &gt;&gt; m; // 输入基准点坐标for (int i = 1; i &lt;= k; i++) &#123; // 可使用 while (k--) 代替cin &gt;&gt; x &gt;&gt; y; // 输入若干个点的坐标if (x == n || y == m) &#123; // 在一条水平线或垂直线上cout &lt;&lt; &quot;divisa&quot; &lt;&lt; endl;&#125; else if (x &lt; n &amp;&amp; y &lt; m) &#123; // 西南cout &lt;&lt; &quot;SO&quot; &lt;&lt; endl;&#125; else if (x &lt; n &amp;&amp; y &gt; m) &#123; // 西北cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;&#125; else if (x &gt; n &amp;&amp; y &lt; m) &#123; // 东南cout &lt;&lt; &quot;SE&quot; &lt;&lt; endl;&#125; else if (x &gt; n &amp;&amp; y &gt; m) &#123; // 东北cout &lt;&lt; &quot;NE&quot; &lt;&lt; endl;&#125;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11498">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/05/17/uva11498-solution/">https://ren-yc.github.io/2022/05/17/uva11498-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『规范』Class Tools Develop Team 团队规则</title>
      <link href="/2022/04/04/class-tools-develop-team-rule/"/>
      <url>/2022/04/04/class-tools-develop-team-rule/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次。" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="0152eb6bc263eb194190126d3a987aebc90275cf2c7d1521a080db9ea965cbb3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Rules - Team </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』『教程』Class Tools 简介</title>
      <link href="/2022/03/29/guide-of-class-tools/"/>
      <url>/2022/03/29/guide-of-class-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介">简介</h3><p>Class Tools 系列应用是 <a href="https://github.com/class-tools/" title="点击跳转至 Github">Class Tools Develop Team</a> 使用 C++ / Python 等常见编程语言开发的，均开放源代码并使用 <a href="https://opensource.org/licenses/MIT">MIT 许可证</a>。</p><p>这个团队是 <a href="https://github.com/ren-yc/" title="点击跳转至 Github">ren-yc</a> 为提升课堂的高效、趣味性而设计的一系列辅助应用，最初只有 <a href="https://github.com/class-tools/RandomRollCall/" title="点击跳转至 Github">RandomRollCall (随机点名)</a> 一个应用。</p><p>目前，这个团队已经有 8+ 位志同道合的开发者，欢迎您的加入！（具体加入方法请见文章底部）</p><p>我们也欢迎各位为我们提供建议。（具体提供方法请见文章底部）</p><h3 id="下载">下载</h3><p>每个开发完成的应用均有一个 Releases (发布) 页面。</p><p>下图中红框部分就是 Releases 页面的入口。</p><p><img src="./releases-enter.png" alt=""></p><p>最新版本的说明以及安装程序的下载链接都在 Releases 中。</p><p>如下图中红框部分。</p><p><img src="./releases-info.png" alt=""></p><p><strong>提示：大部分安装程序都是 64 位的（若无后缀 <code>x64</code> / <code>x86</code>），小部分两种架构均支持，请仔细辨别后再下载。</strong></p><h3 id="安装">安装</h3><p>双击运行下载后的安装程序即可。若安装后程序无法正常运行，请尝试重新安装，确认上述方法均无效后可发送邮件至 <a href="mailto:ldfx_ryc@163.com" title="点击使用默认邮件客户端向 ldfx_ryc@163.com 发送邮件">ldfx_ryc@163.com</a> 寻求技术人员的支持（具体格式请见文章底部）。</p><h3 id="使用">使用</h3><p>每个应用基本上均配有 Wiki 页面，具体位置见下图。</p><p><img src="./wiki-enter.png" alt=""></p><p>进入后有详细的说明介绍。</p><p><img src="./wiki-info.png" alt=""></p><h3 id="有用的信息">有用的信息</h3><p><a href="https://class-tools.github.io/" title="点击跳转至 Class Tools Develop Team 官网">官方网站</a></p><p><a href="https://github.com/class-tools/" title="点击跳转至 Github">Github 组织</a></p><p><a href="mailto:ldfx_ryc@163.com" title="点击使用默认邮件客户端向 ldfx_ryc@163.com 发送邮件">客户服务支持 E-mail</a></p><p>报告错误邮件格式：</p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>应用：xxx版本：xxx系统版本：xxx截图（如果有）：xxx详细说明：xxx联系方式（默认为发送邮箱）：xxx</code></pre><p>提供建议邮件格式：</p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>应用：xxx草图（如果有）：xxx详细说明：xxx联系方式（默认为发送邮箱）：xxx</code></pre><details><summary></summary><h3 id="申请加入-Class-Tools-Develop-Team">申请加入 Class Tools Develop Team</h3><p>首先，请确保您有着扎实的计算机使用与代码编写能力。其次，请确保您对软件开发有兴趣且专门学习过任意计算机语言（列表见下）。然后，加入后需遵守一系列的规范及要求（包括但不限于代码格式方面）。最后，您应有足够的时间来对我们的项目作贡献。</p><table><thead><tr><th style="text-align:center">计算机语言名称 $/$ 计算机代码工具</th><th style="text-align:center">权重</th></tr></thead><tbody><tr><td style="text-align:center">$\text{Java}$ $\text{(Common / Windows API / GUI)}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$</td></tr><tr><td style="text-align:center">$\text{Python}$ $\text{(Common / GUI / Network)}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$</td></tr><tr><td style="text-align:center">$\text{C / C++ / C}\sharp$ $\text{(Common / Windows API / Data Files IO)}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$</td></tr><tr><td style="text-align:center">$\text{Git}$ $\text{(All)}$</td><td style="text-align:center">$5$</td></tr><tr><td style="text-align:center">$\text{Github}$ $\text{(All)}$</td><td style="text-align:center">$5$</td></tr></tbody></table><p><strong>注：当对于您擅长的计算机语言的权重之和 $\le$ $15$ 时，可申请加入。</strong></p><p>当您确认要加入本开发团队后，请附 <a href="./Class%20Tools%20Develop%20Team%20%E5%85%A5%E5%9B%A2%E7%94%B3%E8%AF%B7%E8%A1%A8.docx" title="点击下载 Class Tools Develop Team 入团申请表">Class Tools Develop Team 入团申请表.docx</a> 向 <a href="mailto:ldfx_ryc@163.com?subject=%E5%85%A5%E5%9B%A2%E7%94%B3%E8%AF%B7" title="点击使用默认邮件客户端向 ldfx_ryc@163.com 发送邮件">ldfx_ryc@163.com</a> 发送邮件，我们的管理员会在 3 个工作日内做出回复。</p></details><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/03/29/guide-of-class-tools/">https://ren-yc.github.io/2022/03/29/guide-of-class-tools/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Self Developed </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『教程』Github &amp; Git 入门指南</title>
      <link href="/2022/03/05/guide-of-github/"/>
      <url>/2022/03/05/guide-of-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文适合刚使用 Github &amp; Git 的开发者参考。</strong></p><h2 id="什么是-Github">什么是 Github</h2><p>GitHub 是世界上最大的代码托管平台，超 5 千万开发者正在使用。被称为开发者最大的社区。因只支持 Git 作为唯一的版本库格式进行托管而被取名为 Github。</p><h2 id="Git-入门">Git 入门</h2><h3 id="安装">安装</h3><p>从 <a href="http://git-scm.com/downloads" title="点击跳转至 git-scm.com">此处</a> 选择合适的平台版本安装即可。</p><p>可以输入以下命令进行验证。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ git --version</code></pre><h3 id="配置个人信息">配置个人信息</h3><p><code>user.name</code> 是你注册 Github 的用户名。</p><p><code>user.email</code> 是你注册 Github 的邮箱。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ git config --global user.name &quot;yourname&quot;$ git config --global user.email yourname@example.com</code></pre><h3 id="常用命令">常用命令</h3><h4 id="git-init"><code>git init</code></h4><p><code>git init</code> 用于初始化本地存储库。</p><p>即创建一个包含存储库信息的<strong>隐藏状态</strong> <code>.git</code> 文件夹。</p><h4 id="git-add"><code>git add</code></h4><p><code>git add $&#123;filename&#125;</code> 用于添加指定文件至暂存区。</p><p>一般使用 <code>git add .</code> 用于添加除在 <code>.gitignore</code> 文件中注明忽略的文件外的所有文件。</p><h4 id="git-commit"><code>git commit</code></h4><p><code>git commit</code> 用于清除暂存区文件并提交。</p><p>用法 1：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ git commit</code></pre><p>然后命令行会调用 vim 进行提交信息的多行输入。</p><p><strong>一般第一行为标题，第二行为空，第三行为附加内容。</strong></p><p>用法 2：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-bash">$ git commit -m &quot;$&#123;commit message&#125;&quot;</code></pre><p><code>$&#123;commit message&#125;</code> 为提交信息。（即多行提交信息的标题）</p><p><strong>最常用的有这 2 种用法。</strong></p><p><strong>上述用法均可带 <code>-S</code> 参数以使用 GPG 签名认证提交。（具体配置本文暂不说明）</strong></p><h4 id="git-clone"><code>git clone</code></h4><p><code>git clone $&#123;remote repository url&#125;</code> 为把远程 Git 仓库克隆至本地。</p><p><strong><code>$&#123;remote repository url&#125;</code> 可为 HTTP 或 SSH。（一般来说 SSH 在国内更快）</strong></p><p>SSH 需生成密钥后才可使用。（具体配置本文暂不说明）</p><h4 id="git-remote"><code>git remote</code></h4><p><code>git remote add $&#123;origin repository short name&#125; $&#123;remote repository url&#125;</code> 用于配置远程存储库以进行远程操作。</p><p>一般来说 <code>$&#123;origin repository short name&#125;</code> 为 <code>origin</code>。</p><h4 id="git-push"><code>git push</code></h4><p><code>git push $&#123;origin repository short name&#125; $&#123;branch&#125;</code> 用于同步本地存储库至远程存储库。</p><p><code>$&#123;origin repository short name&#125;</code> 使用与 <code>git remote</code> 配置的 <code>$&#123;origin repository short name&#125;</code> 一样。</p><p><code>$&#123;branch&#125;</code> 为远程存储库的分支。</p><p><strong>切记 <code>$&#123;branch&#125;</code> 分支要在远程存储库存在，否则会报错。</strong></p><p><strong>本文持续更新……</strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/03/05/guide-of-github/">https://ren-yc.github.io/2022/03/05/guide-of-github/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10281 Average Speed</title>
      <link href="/2022/01/17/uva10281-solution/"/>
      <url>/2022/01/17/uva10281-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10281" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10281" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="前置知识">前置知识</h3><p><a href="https://www.runoob.com/cprogramming/c-function-sscanf.html">sscanf() 的用法</a></p><h3 id="题目大意">题目大意</h3><p>给出时间和速度，计算所走的路程。<s>（超级简洁是不是？）</s></p><h3 id="思路">思路</h3><p>这题是一道计算题，依据公式模拟即可。</p><p>将前面的速度与时间和现在的分别存放，最后计算即可。</p><p><strong>本题重点：</strong></p><ul><li>本题的输入格式较特殊，需要先读入一行整个字符串然后再通过 <code>sscanf()</code> 函数进行拆分。</li></ul><h3 id="代码">代码</h3><p><strong>详细思路在注释中</strong></p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;char tmp[101];//sscanf() 仅支持字符数组int sum, hour, minute, second, t_prv = 0, t_nxt = 0;//英语自行理解double distance = 0.0, v_prv = 0.0, v_nxt = 0.0;//记得要加 &quot;.0&quot;while (gets(tmp)) &#123;//字符数组读入用 gets()sum = sscanf(tmp, &quot;%d:%d:%d %lf&quot;, &amp;hour, &amp;minute, &amp;second, &amp;v_nxt);//sscanf() 的返回值为拆分的个数t_nxt = hour * 3600 + minute * 60 + second;//计算distance += v_prv * (t_nxt - t_prv) / 3600.0;//距离t_prv = t_nxt;//更新值if (sum == 3) &#123;//如果拆 3 块printf(&quot;%.2d:%.2d:%.2d %.2lf km\n&quot;, hour, minute, second, distance);//注意格式&#125; else &#123;v_prv = v_nxt;//更新值&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10281">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/17/uva10281-solution/">https://ren-yc.github.io/2022/01/17/uva10281-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U198288 元素插入</title>
      <link href="/2022/01/17/u198288-solution/"/>
      <url>/2022/01/17/u198288-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息">题目信息</h3><h4 id="题目描述">题目描述</h4><p>指定位置的插入：</p><p>在一个数组的第 $x$ 位置<strong>前</strong>插入一个新的 $y$。</p><h4 id="输入格式">输入格式</h4><p>第一个有一个整数 $n$;</p><p>第二行有 $n$ 个整数 $a_i$；</p><p>第三行有一个整数 $x$；</p><p>第四行有一个整数 $y$，为要插入的整数。</p><h4 id="输出格式">输出格式</h4><p>元素插入后的 $a_i$ $\sim$ $a_{n+i}$。</p><h4 id="输入输出样例">输入输出样例</h4><h5 id="输入-1">输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>57 2 3 4 529</code></pre><h5 id="输出-1">输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>7 9 2 3 4 5</code></pre><h4 id="提示说明">提示说明</h4><p><strong>本题采用捆绑测试</strong></p><p>对于 $100%$ 的测试点：</p><p>$1$ $\le$ $x$ $\le$ $n$ $\le$ $10^2$，</p><p>$1$ $\le$ $a_i,y$ $\le$ $10^9$。</p><table><thead><tr><th style="text-align:left">Subtask</th><th style="text-align:left">分值</th><th style="text-align:left">特殊范围</th></tr></thead><tbody><tr><td style="text-align:left">$0$</td><td style="text-align:left">$10$</td><td style="text-align:left">$x = 1$</td></tr><tr><td style="text-align:left">$1$</td><td style="text-align:left">$10$</td><td style="text-align:left">$x = n$</td></tr><tr><td style="text-align:left">$2$</td><td style="text-align:left">$80$</td><td style="text-align:left"><strong>无特殊范围</strong></td></tr></tbody></table><p>Idea：贾小宇</p><p>Solution：任宇宸</p><p>Code：贾小宇</p><p>Data：任宇宸</p><h4 id="题目难度">题目难度</h4><p>$\textcolor{red}{入门}$</p><h4 id="题目地址（可能变更）">题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U198288" title="点击跳转至洛谷">洛谷</a></p><h3 id="题目解析">题目解析</h3><p>简单模拟，不用多说了。</p><p>我们可以将在这个数组 $a_n$ 种插入元素分为 $2$ 种情况：</p><ol><li><p>在元素 $a_0$ 前</p></li><li><p>在数组 $a_n$ 的中间</p></li></ol><p>这题也没必要骗 $\text{Subtask}$ 的分。（尽管部分分很多）</p><h3 id="代码分析">代码分析</h3><p>不用专门写一个插入元素的函数，直接全输入完然后遍历输出，当前下标为要插入元素的下标时，多输出要插入的那个元素即可。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int n, x, y, a[101] = &#123;0&#125;;cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i];&#125;cin &gt;&gt; x &gt;&gt; y;for (int i = 0; i &lt; n; i++) &#123;if (i == x - 1) cout &lt;&lt; y &lt;&lt; &quot; &quot;;cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/17/u198288-solution/">https://ren-yc.github.io/2022/01/17/u198288-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U198094 前 n 个偶数位回文数之和</title>
      <link href="/2022/01/16/u198094-solution/"/>
      <url>/2022/01/16/u198094-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息">题目信息</h3><h4 id="题目描述">题目描述</h4><p>给定一个正整数 $n$，输出前 $n$ 个偶回文数之和。</p><p>偶回文数：</p><ul><li>有偶数个数位的回文数，如：$11, 22$。</li></ul><h4 id="输入格式">输入格式</h4><p>一行一个正整数 $n$。</p><h4 id="输出格式">输出格式</h4><p>一行一个正整数，表示前 $n$ 个偶回文数之和。</p><h4 id="输入输出样例">输入输出样例</h4><h5 id="输入-1">输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>3</code></pre><h5 id="输出-1">输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>66</code></pre><h4 id="提示说明">提示说明</h4><p>对于 $100%$ 的数据：</p><p>$1$ $\le$ $n$ $\le$ $100$</p><p>Idea：250lht</p><p>Solution：任宇宸</p><p>Code：任宇宸</p><p>Data：任宇宸</p><h4 id="题目难度">题目难度</h4><p>$\textcolor{red}{入门}$</p><h4 id="题目地址（可能变更）">题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U198094" title="点击跳转至洛谷">洛谷</a></p><h3 id="题目解析">题目解析</h3><p>这是一道回文数 $+$ 字符串 &amp; 整数的转换题。</p><p>我们只需写一个整数转换字符串、判断整数位数为偶数和判断字符串回文的函数即可。</p><h3 id="代码分析">代码分析</h3><p><code>int_to_string</code> 是<s>网上抄的</s>模板函数。<s>当然在 Python 中直接 <code>str()</code> 就可以转换</s>（可能有些不必要的如判断负数的多余内容）</p><p><code>huiwen</code> 是判断回文字符串的函数。</p><p><code>weishu</code> 是判断整数位数是否为偶数的函数。</p><p><code>main</code> 里面就按照题目模拟即可。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;int i = 0, k, n;char temp;if (m &lt; 0) &#123;s[i] = '-';m = -m;i++;&#125;while (m &gt; 0) &#123;n = m % 10;m /= 10;s[i] = n + '0';i++;&#125;s[i] = '\0';if (s[0] == '-') k = 1;else k = 0;for (int j = k; j &lt; i / 2; j++) &#123;temp = s[j];s[j] = s[i - j - 1 + k];s[i - j - 1 + k] = temp;&#125;&#125;bool huiwen(int g) &#123;int i, j;char b[101] = &#123;0&#125;;int_to_string(b, g);for (i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;if (b[i] != b[j]) return false;&#125;if (i == j) return false;return true;&#125;bool weishu(int x) &#123;int cnt = 0;while (x != 0) &#123;x /= 10;cnt++;&#125;return cnt % 2 == 0;&#125;int main() &#123;long long n, i = 1, sum = 0;cin &gt;&gt; n;while (n != 0) &#123;if (weishu(i) &amp;&amp; huiwen(i)) &#123;n--;sum += i;&#125;i++;&#125;cout &lt;&lt; sum &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/16/u198094-solution/">https://ren-yc.github.io/2022/01/16/u198094-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10041 Vito&#39;s Family</title>
      <link href="/2022/01/11/uva10041-solution/"/>
      <url>/2022/01/11/uva10041-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10041" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10041" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="前置知识">前置知识</h3><p><a href="https://www.runoob.com/python/python-lists.html">Python 中列表（数组）的基本使用</a></p><h3 id="题目大意">题目大意</h3><p>给定每个点所在的位置，求任意一个点到其他点的最短路程和。（点都在一条直线上）</p><h3 id="题目思路">题目思路</h3><p>$\because$ 多个点直接中位数点距离各个点的距离和最短</p><p>$\therefore$ 编写代码求中位数即可</p><h3 id="代码">代码</h3><p>献上<s>简洁的</s> Python 3 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">n = int(input())#记得强转for _ in range(n):#可以变成 while n &gt; 0:...n -= 1    b = list(map(int, input().split()))#Python 的独特输入方式    del b[0]#对于 Python 来说第一个数据没用    b.sort()#排序    s = 0#定义并清零    c = b[len(b) // 2]#中位数，'//' 为整除    for i in range(len(b)):#默认由 0 至 len(b)        s += abs(c - b[i])#计算距离    print(s)#输出总和</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10041">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva10041-solution/">https://ren-yc.github.io/2022/01/11/uva10041-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA465 Overflow</title>
      <link href="/2022/01/11/uva465-solution/"/>
      <url>/2022/01/11/uva465-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA465" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/465" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意">题目大意</h3><p>给定两个正整数和两数之间的符号，为 $+$ 或 $\times$。</p><p>判断这两个数中的一个数或者运算结果是否大于 <code>int</code> 范围。</p><h3 id="解题思路">解题思路</h3><p>众所周知，<code>int</code> 的范围是 $2^{31} - 1$ 即 $2147483647$，本题使用 C++ 大概率会导致 <code>int</code> 溢出，也有小概率会导致 <code>unsigned long long</code> 溢出。</p><p><strong>这时候，我们就需要 Python 了！！！</strong><img src="https://xn--wcs.tk/a" alt=""><img src="https://xn--wcs.tk/a" alt=""><img src="https://xn--wcs.tk/a" alt=""></p><p>这样一来就好办了，可以一直输入直到 <code>End Of File</code>，并判断，写一个 <code>while True</code> 就解决了。</p><p>本题使用 Python 解题的难点是<strong>如何判断 EOF？</strong></p><p>众所周知，Python 有着一堆 <code>Error</code> 类，一不小心就会引发并终止程序，在 OJ 上显示为 RE，所以很难判断具体为哪个错误类。</p><p>Python 不像 C++ 一样可以直接用 <code>!= EOF</code> 判断输入是否为 EOF，需要用 <code>try except</code> 语句实现。</p><p>本题坑点（<strong>英语好的人自动跳过</strong>）：</p><p>一个输入可以输出 $0 \sim 3$ 行判断，不是固定输出一行。</p><h3 id="代码">代码</h3><p>献上简洁的 Python 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">import sys#可把 break 换成 sys.exit()MAX = 2147483647#2^31-1while True:#无限循环直到 EOFError    try:#try ... except ...        s = input()#尝试输入    except EOFError:#如果引发错误        break#结束程序，也可使用 sys.exit()    print(s)    l = list(s.split())#列表存储    if int(l[0]) &gt; MAX:#注意转换类型        print(&quot;first number too big&quot;)    if int(l[2]) &gt; MAX:#可以两个数都超 int，用 if        print(&quot;second number too big&quot;)    if l[1] == &quot;+&quot; and int(l[0]) + int(l[2]) &gt; MAX:#注意有两个条件        print(&quot;result too big&quot;)    elif l[1] == &quot;*&quot; and int(l[0]) * int(l[2]) &gt; MAX:#if 也可以        print(&quot;result too big&quot;)</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva465">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva465-solution/">https://ren-yc.github.io/2022/01/11/uva465-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11727 Cost Cutting</title>
      <link href="/2022/01/11/uva11727-solution/"/>
      <url>/2022/01/11/uva11727-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11727" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11727" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意">题目大意</h3><p>给定 $3$ 个整数，求中间数。</p><h3 id="解题思路">解题思路</h3><p>循环输入 $3$ 个数（<strong>循环值从 $1$ 开始</strong>），再存入列表（数组），输出排序后的列表的第 $2$ 项值（即中间数）。</p><h3 id="代码">代码</h3><p>Python 代码简洁又明了。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">t = int(input())#注意默认输入为字符串，要强制类型转换for i in range(1, t + 1):#由 1 开始    a, b, c = map(int, input().split())#Python 无法一行直接输入多个值    l = [a, b, c]#存入    l.sort()#排序    print(&quot;Case &quot; + str(i) + &quot;: &quot; + str(l[1]))#非字符串无法合并，所以要强制类型转换</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11727">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva11727-solution/">https://ren-yc.github.io/2022/01/11/uva11727-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - SP7733 HPYNOS - Happy Numbers I</title>
      <link href="/2022/01/11/sp7733-solution/"/>
      <url>/2022/01/11/sp7733-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/SP7733" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/spoj/7733" title="点击跳转至 Sphere online judge">Sphere online judge</a></p><h3 id="思路">思路</h3><p>Happy Number 的分裂规则是<strong>每次分裂的都不同</strong>，<strong>最终分裂成</strong> $1$，如果重复输出 $-1$。</p><p>直接按照题意模拟即可。</p><h3 id="代码">代码</h3><p>Python 的代码极度简洁:</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">import sys#退出程序用到的模块a = []#数组初始化cnt = 0#次数归零n = int(input())#切记int()，默认输入字符串while True:#无限循环直到退出    s = 0#归零    m = n#临时变量    while m &gt; 0:#m的位数次        x = m % 10#取模        s += x * x        m //= 10#整除    cnt += 1#次数    if s == 1:#和为1        print(cnt)#输出次数        sys.exit(0)#退出    a.append(s)#在末尾添加    n = s#更新    for i in range(0, len(a) - 1):#不包括当前的        if a[i] == s:#重复            print(-1)            sys.exit(0)#退出，相当于 CPP return 0;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-sp7733">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/sp7733-solution/">https://ren-yc.github.io/2022/01/11/sp7733-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - SP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA12503 Robot Instructions</title>
      <link href="/2022/01/11/uva12503-solution/"/>
      <url>/2022/01/11/uva12503-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA12503" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/12503" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意">题目大意</h3><p>一只机器人站在一条线的零点，<code>LEFT</code> 命令使它向左走一格，<code>RIGHT</code> 命令则是向右走一格，求机器人最终所在的位置。</p><h3 id="解题方法">解题方法</h3><p>我们可以定义一个 $a$ 数组，用于存放命令，且只能有 $-1$ 和 $1$ 两个值，分别代表往左和往右。</p><p>读入的话可以写一个函数，使用 Python 数组的 <code>append</code> 函数在数组末尾追加数值。</p><h3 id="代码">代码</h3><p>详细解释在注释中。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">a = []def f(c):#输入函数    if c == &quot;LEFT&quot;:#判断        a.append(-1)#追加        return -1    elif c == &quot;RIGHT&quot;:        a.append(1)#追加        return 1    else:        a.append(a[int(c) - 1])#追加        return a[-1]t = int(input())for _ in range(t):#循环    m = int(input())#输入    a = []#清空数组    now = 0#清零    for i in range(m):        k = list(input().split())        if len(k) == 1:            now += f(k[0])#移动        else:            now += f(k[2])#同上    print(now)#输出</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva12503">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva12503-solution/">https://ren-yc.github.io/2022/01/11/uva12503-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10035 Primary Arithmetic</title>
      <link href="/2022/01/11/uva10035-solution/"/>
      <url>/2022/01/11/uva10035-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10035" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10035" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目大意">题目大意</h3><p>给定两个整数，请你求两数相加时进位的个数。$^*$</p><p>$^*$ 上文为转载: <a href="https://keaidexiaoyu.blog.luogu.org/solution-uva10035">https://keaidexiaoyu.blog.luogu.org/solution-uva10035</a></p><h3 id="前置知识">前置知识</h3><p><strong><a href="https://blog.csdn.net/cjx14060307101/article/details/103168330">Python 3 中的各种赋值运算符</a></strong></p><h3 id="题目解法">题目解法</h3><p>由于使用的是 Python，无法使用 <code>while (cin &gt;&gt; a &gt;&gt; b)</code>，我们可以先套一层 <code>while True</code>，遇到 $a, b = 0$ 直接 <code>break</code>，由于 $a, b \le 10^{10}$，所以我们写一个循环 $10$ 次的 <code>for i in range(10)</code> 判断每一位的进位情况：</p><ul><li><p>如果 $&gt; 9$ 计数器加一；</p></li><li><p>其他情况 计数器不变。</p></li></ul><p>我们可以使用 <code>//=</code>，用于把 $a, b$ 都减少一位。</p><p>输出就不讲了，只有一个关键点：C++ 的 <code>else if</code> 在 Python 中为 <code>elif</code>，并且他们不是函数而是关键字，可以不带括号。</p><h3 id="代码">代码</h3><p>不需要导入任何模块</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-python">while True:    a, b = map(int, input().split())    cnt = 0    if (a == 0 and b == 0):      break    c = 0    for i in range(10):      c = a % 10 + b % 10 + c      if c &gt; 9:        c = 1      else:        c = 0      cnt += c      a //= 10      b //= 10    if cnt == 0:      print(&quot;No carry operation.&quot;)    elif cnt == 1:      print(&quot;%d carry operation.&quot; % cnt)    else:      print(&quot;%d carry operations.&quot; % cnt)#毒（jian）瘤（dan）的输出格式</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva10035">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva10035-solution/">https://ren-yc.github.io/2022/01/11/uva10035-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF550A Two Substrings</title>
      <link href="/2022/01/11/cf550a-solution/"/>
      <url>/2022/01/11/cf550a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF550A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/550/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="思路">思路</h3><p>这道题很简单，用一个字符串代替原来输入的字符串，把 <code>BA</code> 和 <code>AB</code> 用 <code>.</code> 代替。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;string s;cin &gt;&gt; s;int AB = s.find(&quot;AB&quot;);//定义&quot;AB&quot;的位置int BA = s.find(&quot;BA&quot;);//定义&quot;BA&quot;的位置if (AB != -1) &#123;string temp = s;//定义临时字符串temptemp.replace(AB, 2, &quot;.&quot;);//用&quot;.&quot;代替int BA = temp.find(&quot;BA&quot;);if (BA != -1) &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;//如果没有输出YESreturn 0;//结束程序&#125;&#125;if (BA != -1) &#123;//同上string temp = s;temp.replace(BA, 2,&quot;.&quot;);int AB = temp.find(&quot;AB&quot;);if (AB != -1) &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;return 0;&#125;&#125;cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;//如果都没有找到输出NOreturn 0;//华丽结束&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf550a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf550a-solution/">https://ren-yc.github.io/2022/01/11/cf550a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF268A Games</title>
      <link href="/2022/01/11/cf268a-solution/"/>
      <url>/2022/01/11/cf268a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF268A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/268/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目大意">题目大意</h3><p>球队间打比赛，分主场和客场，要求一场比赛中两支队伍服装不能相同，求满足条件的场数。</p><h3 id="思路">思路</h3><p>暴力枚举。</p><p>详细解析见下注释。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;int n, a[101] = &#123;0&#125;, b[101] = &#123;0&#125;, cnt = 0;cin &gt;&gt; n;//输入场数for (int i = 0; i &lt; n; i++) &#123;cin &gt;&gt; a[i] &gt;&gt; b[i];//输入两支队伍服装的颜色&#125;for (int i = 0; i &lt; n; i++) &#123;//枚举for (int j = 0; j &lt; n; j++) &#123;if (a[i] == b[j]) cnt++;//计数器自增&#125;&#125;cout &lt;&lt; cnt &lt;&lt; endl;//输出计数器return 0;//好习惯&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf268a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf268a-solution/">https://ren-yc.github.io/2022/01/11/cf268a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1475A Odd Divisor</title>
      <link href="/2022/01/11/cf1475a-solution/"/>
      <url>/2022/01/11/cf1475a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1475A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1475/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目大意">题目大意</h3><p>判断一个数能否被一个大于 $1$ 的数整除。</p><p>我们最先想到能一直除以 $2$，如果余数为 $1$，那么输出 <code>NO</code>，否则输出 <code>YES</code>。</p><p>还要注意一点 $n$ 的范围是 $10$ 的 $14$ 次方，$\mathrm{INT}$_$\mathrm{MAX} \approx 10^9$，所以要用 <code>long long</code>。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;long long t, n;cin &gt;&gt; t;for (int i = 1; i &lt;= t; i++) &#123;cin &gt;&gt; n;while (n % 2 == 0) &#123;n /= 2;&#125;if (n == 1) &#123;cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf1475a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf1475a-solution/">https://ren-yc.github.io/2022/01/11/cf1475a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1598A Computer Game</title>
      <link href="/2021/10/11/cf1598a-solution/"/>
      <url>/2021/10/11/cf1598a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1598A" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1598/A" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目翻译">题目翻译</h3><p>给定两行字符串，求能否从左上角走到右下角（<code>0</code> 为可走，<code>1</code> 为不可走）。<strong><s>（超简洁翻译）</s></strong></p><h3 id="题目思路">题目思路</h3><p>我们可以读入完字符串后循环遍历，两两比较，如果有 $s1_i = s2_i$，说明无法通过，则 $flag = true$（也可以输出后直接 <code>continue</code>）。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁！using namespace std;int main() &#123;int t;cin &gt;&gt; t;while (t--) &#123;//几乎每道 CF 题都要int n;bool flag = false;string a, b;//不使用 char 数组（复杂、麻烦）cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;for (int i = 0; i &lt; n; i++) &#123;if (a[i] == '1' &amp;&amp; b[i] == '1') &#123;//两行都为 1flag = true;//发现&#125;&#125;if (flag == 0) &#123;//若未发现cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;&#125; else &#123;//否则cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf1598a">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120711294">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/11/cf1598a-solution/">https://ren-yc.github.io/2021/10/11/cf1598a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF44B Cola</title>
      <link href="/2021/10/06/cf44b-solution/"/>
      <url>/2021/10/06/cf44b-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF44B" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/44/B" title="点击跳转至 Codeforces">Codeforces</a></p><h3 id="题目思路">题目思路</h3><p>本题第一眼可以看出是一道暴力枚举，但是不能用三层 <code>for</code> 循环，$100%$ 超时。</p><p>所以我们可以先从 $2$ 升的可乐开始循环，通过前两个循环来推算出 $0.5$ 升可乐的数量。</p><p><strong>注意：本题的 $a$ 为 $0.5$ 而 $n$ 为整型，第一层循环要两个两个加</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//懒人专用using namespace std;int main() &#123;int n, a, b, c, ans = 0;cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;for (int i = 0; i &lt;= a; i += 2) &#123;//n 必须是整数，但 a 是 0.5 升，所以两个两个加for (int j = 0; j &lt;= c; j++) &#123;if (n - (i / 2 + j * 2) &lt;= b &amp;&amp; n - (i / 2 + j * 2) &gt;= 0) &#123;//算总量并判断是否小于等于 b 和 nans++;&#125;&#125;&#125;cout &lt;&lt; ans &lt;&lt; endl;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-cf44b">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120628543">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/06/cf44b-solution/">https://ren-yc.github.io/2021/10/06/cf44b-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『游记』CSP-J 2021 初赛</title>
      <link href="/2021/09/19/csp-j-2021-1/"/>
      <url>/2021/09/19/csp-j-2021-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请再试一次。" data-whm="未知错误，请报告给博客管理员!">  <script id="hbeData" type="hbeData" data-hmacdigest="3f7a0008023df22397d1e5d7e7818bdf635632207fdc029350a539a53a4b927d">8fb749fda75eae689c3df2a2a950d5eee9f7994bff8040d01a9735e92fc2453e879dfe8825d3a3b2a8dc528c0fea74d7a14410bc52522380dc4808f946bcfd233046883f8ae03ed19376f9d69c241c79015048cf630effa0447df1cf6e25a4d1db19ad315fdaa9ceb3297d7b172d82a8ce816f7787d606345a5c9a98da2305eb33c4892ad79a9e8a760b3260a82c5d1b97c8184232b5aac08999316d260033e096128416d3367172f63bd3535e159521f8406b4dce674dca118a61c2b52d0decefb610d582b98edba0966177ba7ca4428ebcf65df69e6d3c229bde4a4fd2e6defcfe8bdccc89a91f6a9af5056bb574997707d9d932f3ccd9cce1d17d9c38a7ed797dac00b8511b140e326f09dcb0143a1759ea998db1c65c7adeb43861cf5100b79cf19232a87199adcedf79b677dafd75e37877969e51a2689fcaa07b8942ee8525a2f8dce593ec8ff6a56de6dfd84bae22fb59725491549f2575d326d323b4366cf67feec82ca20a2e1a8095ac9a0a3ea2d66d4ee0243ddf969637e7ee08dfe1cd6f3ae37e5628dd6e9e94ac116af8bd9e10e87a9026637f1114021781a185d57cf82de68059453b99af2b71ac871c668d365a3b366ea94daac6c95235cec4af6fde55cb82fec48ce8fa6870b2679182986014c0052b6e0bf59d72624d70fc408c2d40605fec4fd9d2ce4e587e273f3b13e3ef432da8d2a6a1fb534edf1e9916bb8d31825fa29ff33664e67178aea224261116e398d4f194eca9aabacee76f3a47580147b21f0c10c4192d1c2b403caf2f3c18b7699866e2ed488f6a4f8c056015cc50dae59902c0de01c0214a8c6e617782b270d37a6dcb90a61be884e3d88d57446b5d677e4de62f4d0d87615906bea4b27289db2d87a7093d5c49a60cc6aacee8fccf208b450b97c2334b15c46bfa113f6af6e62a0117c75d5ff7b03edffa1b67a0f580b4ec769b8e4623a344e9bee2f6ad9bb6eba708937ae2eaffa037f1854b19d321b63451cfdc27b0e55f819aebf17b7384ac2d0b7868ed4f09319308832d2be8de80a837bd3319f408a7f02ace1449f5d39e320cb2c5acfd49a13a17032990560b50e63d9825fcd3a922c0ddd930ac9bdc0223a313744ae78eda066168401b9085b4b92d3407804bae3f07ded9bbb32a2acd8a673bd3c2d15e441e3016b16b6ed33f3445be354f9e709fef159f2183961e16636a920bc0c0cd56869fe85d5070f7ef0bcc66cd6d943c49289d6df11edf310f7132b77c224fd74fd18dbdb062036cb369cd82b7c4f7267989ecfb1bb0dd5107c41745b3bb2aae9d542388997cf697290a198b443d015a305d82e482f7d8f525e04374fd9a9aed04d0cff50fbf4a1051151e4279d60f22034409ccdea1702de5df50efa1c62b654a742b8b61cdb87960d76d014792cad0bee761ef1b66f9af33644c537d38950d1583f8db295c40334267743f348f9fdd8c5aad9c65a273a28ac2519b045de384914c6e9bd500c28f512a0ee9acbfa914a017a5e0c0227bde3f446b475a76bcf28a10efe1a8dc14b2a19d70a292550a587c87211a4de4cd2021e11117966fcebfb883873b4c6cf50565edaf5a2c250d87c628e1026019c96d6f20aace7e4bb611ec0c81a491abf7f2ef195cf1dbf409d0378b13176a0de41eea71bc11de395e80b08177bb3236d909a873a6a9567a9cba8f9214899dbd1825eef5a728edee75b59d0b94ce3637d2229adf00f43822481e9c716e6c1aaeecadeee199a1fe8b49a3d304a0172020f2ac6197a6fcb0a5301971abff3561e0ca08dfe7847ee151cf5b41aa90f211c7b23a48ba7744e2ebf85645b986f188a1717af139e896e8f7b808c3c66bdfe631279998a5a0719507d6a98148404653aac7bb8b80ca8575b918baf8f9706ac84047e8f218dce66efbc0b4df6918fc2c09578b01ba35aca768b27871289422700c97d8ae0adb6f357fdacfe9d75d4b6ad86f8b5a2b642f15d50155a7a732740a0e4cfbc2b131f7e677412cae1515a715a0bf9fba68389664fda82c3488b5343a981a97c321567641ebd3238be476b461b50ced1fdc3db6dfd3989e2b098e2d113fb538bc87191f2d198771eeab9f7773f2bb6daecbf8fe358f421190758011dbdc557cfe3720c23d76be79ab23423d0f4dc037770f0cf686f7b22f3e92e1fcfe918549d7e4539f0082f77523120e71ffd1f5ac6dfc3d482d01fab5027bf853d80a8e2281c14d01f5d9ea16a46585f169a4a15e7b5a33bc611a9f4e51903a83260355d1c05e18efe0ddb38288605dc816f722fa277bf3a5c886f14b9b8b4afc2f07d4cf74a7d05e7ef4d0e56c615d21c38a215c885fd97e1a57652abb54ea0da5b17d48f9f7de9e31ea9d4b2cc07cbf0456ddd7d220b77d74f538d2b22480b0c088f47aaa0811dc703573c58510b6461ff20e3da7f9dc3f3ac8d86c1c93e05c3391efcca9f8327f06590ba03efaf9a711d3ea9532b3c2db37669a8a6e09412a6c5090b96c18819b0347ae110a43d11ca505ec92fab6293e52ff8e185680cb4d0f437565fbe3741b564d7b0850d0ea53861fc07923b2d6b0e6ef3795c38b15012a6940e49cd3e9c9496946762b9bd06037c5cfcdd4ee5e130085456d06edb9226b4294783a859a863bdb3c73042ea293bcc6a1be33c4ec3d5330a1e6cf21a658e2f8aea07c5c5bea68c3a4091f334f5a34e1911e1ff6abb2f86d2a39612ee31d622c4157e1b3204f4134bdf169faced7dfd5de32c6a70b554d42684540edb69903f0277833b8a9b5ed86c8612b702a0f2633d5b98d2a294f1214c1ff2471122c7f470993b8939877bf333ab57d9bbc20634c12584a9ffb0a4871d84de06c1aa4e97a4dd27d0aa354ececf80081a1c6a959075f983078d5be9e02bbe50528364717f450848c08d59e28e4797ffd83c3672494fae41345e567f5613351d31796db0e1ff02eec46de505be7389319284e49a89e3b94775a686154f50ae04d6c0109967c0eb63dddaed4da10d01c56929f327fdac3565ebe07212c6149653b95072c0e593bf706265d99d6ba2a7ea0124190e92929bd099893192b091572a42ebfc8c87f9950d79a5667af5fb5d1252741e29bd9e446a236114a7ee5f2ffd4c2e9079003aeece2d6ccbc4622d338e9f30e0562a8211240a3911e6123f38d6e431d46c902277bb045f71a2bf6b631ef0f73db9ff4e2f2fd9d880e4e6b56025a5b5f170eae972080018186cb96d5f4547ccd24914f490463a8e7922f418eb834de71514696e494fbf703c552cb6c043ad88bcd6eec19bc64c40f6e570104d34cbd2327ab5e126e51fe526570fdc382e24ad17bc0756502819e73633a7f958efdffd7f5ca688befa5dcfb1f2c14968c2bd100ad07c08013e2f4470a433b423a02e9b65d983b0c9d23a027e650907c4efb69e373dd6a51b2f39a30242defccf8fd7dc7d403e2ccdd314428a554864563051e65080112b11c8286924de4e23e30c8ea7dbb89f1cd4e8c826a38c6676d2ef914450787680f0604ddd902ab4fc9070b6820cd57882f56ea66bc39422b777f6ecbd0c8f47bac31bac685bf45ea004d05d205ebd9798f761501a748c2a8fdaf3a9c39451ee10346121a72fea89c4642752a7d05919efcaf99eb540275674d42a17753a932ba56a1ff60dee9a5ae2725f2d0d6dc7c136d451c0aa03129d5c9f92f64299e951513b5595654e9dad105376c040b04feb4ddde621c211544b02878bf32598ad14607e43d57c1cbabb49a07eb2cb7a296e77f017d16f84a40995e80d3b11df62c2168d92f0a90fedc4ec047d62e622191f92404803968edb128ac5799e8a0efbc16df28f23a39afdeb07827cdb801c6d158d80e9e3e4cbfce2729fda378cd4b251b0e9c26331170ad081ce49f2b632c2d1756c2708c7dee399a860f0cd4b0eef3feab4623080275840ba1ee8e1f50837b7f616b34609c07c49754a5763509c29b856162550556a4abac5023035823e9ba7d5e77fb39c8e797c167886a87742bdfa000521f4f92f321156f08b5d8719f1c8717ecd009ce205a46b407069f9291d3b0a39a88752f2a06c4ae3b4b80f73390dff689f4e9612cf20d6c176b19d8d472169bb1176ccf68813778c80aef3135d84a748a08d854cb3b7bdc5c55f4f1d62e780589ebb05401ac3a1214eb7b48240410a68e630f61b18dfba6177410472ce43a65ce196c8cd4370ca405e28a540e22a9a5ca09cf5af4021c03dfbd3485760a261491f3dfdf96f80ee8f0b6e86afbb3bec155a880c80c2c94564b6b45b663345e23b8168223a39ebb982cf361ec0ce228a843885995cf1300735a34cc535c430058c5806ce3ebbf096cf793383e2ff49f4d8cc83d1f230f7c7fb35c53f28638572de498c10a038490d1a7297caaa5d6f5c18b6130c637aa02c9d38519155131afba2ac783faeb0eca4feea68d823cec6c9181ad5a535d680fea559893941cfea791566516256095e8bc8625565eb08b040db61692c40926e6dc62b7562967784fb7e6025be6a547306c628502561d0aad554616c8cd25f49330736f14dce82c0fe9c37b5fd395b0fef18c8d5c3508a8668590a282848ed93c5b23028dd4e826c28b4dd11512b22720cc648fdcede7ac1242af6bd7fc85e61969f2f65752753493e0fd7a277d8a087c452fc08bd1e8ef20b75529850d4988dfd708a57bf13992906c1ed80d5977773e998540e3c08e1ced9c74b2b69be6f9a7940c6c5b600203eadd0ef4a1e2f689356d13939867339578a39bf6a12090cea57bda9dd7280228356f97c6c5523e1120eb316bd4f631ad5154e4687015b07d47dbaa4ca55c60ae857e169115c551482c41d049dc6fa401a99a7a25c2fdb3c5da4e26571f65cc391319bb73a8ae3d5569e17ad25acac989ad3445ad6bde746272a2a8b49321e4e186558ddc42b3d8d5927ebf7a84e54f6e486e191f6528c83eb368ebd555</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请点击此处输入密码，输入完请按 Enter 并刷新页面。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> NOI Series </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11559 Event Planning</title>
      <link href="/2021/09/14/uva11559-solution/"/>
      <url>/2021/09/14/uva11559-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11559" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11559" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目翻译">题目翻译</h3><p>作为一次短途旅行的组织者，你需要根据参与人数、预算、酒店及其周末空余床位的情况，决定是否成行。其中旅游人数 $N$，预算 $B$，可供考虑的酒店数量 $H$，可选择的出行周末 $W$。其中 $H$ 确定之后，会输入 $H$ 组数据，每两行为一组，第一行表示该酒店的人均住店费用 $p$，第二行表示 $W$ 个周末对应每个周末该酒店的床位空余情况 $a$。</p><h3 id="题目解析">题目解析</h3><p>本题很明显就能看出是一道模拟题。</p><p>只需要在输入的时候顺便计算一下是否超预算。如果有，则顺便记录下是否是更低的预算即可。如果都超预算，那么输出 <code>stay home</code>，否则就输出记录的那个更低的预算。</p><p><strong>一般 UVA 的题读入行数是不给定的，所以我们要使用</strong> <code>while (cin &gt;&gt; n)</code> <strong>或者</strong> <code>while (~scanf(&quot;%d&quot;, &amp;n))</code><strong>。</strong></p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁using namespace std;int main() &#123;int N, B, H, W, p, a, Min = INT_MAX;//Min 根据个人喜好设置较大数while (cin &gt;&gt; N &gt;&gt; B &gt;&gt; H &gt;&gt; W) &#123;//如果是 scanf 可以加上 != EOFfor (int i = 0; i &lt; H; i++) &#123;cin &gt;&gt; p;for (int j = 0; j &lt; W; j++) &#123;cin &gt;&gt; a;if (a &gt;= N) Min = min(Min, p * N);//读入时求最小值&#125;&#125;if (Min &lt;= B) &#123;cout &lt;&lt; Min &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; &quot;stay home&quot; &lt;&lt; endl;&#125;Min = INT_MAX;//根据个人喜好&#125;return 0;&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva11559">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120657641">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/09/14/uva11559-solution/">https://ren-yc.github.io/2021/09/14/uva11559-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/uva13012-solution/"/>
      <url>/2021/08/23/uva13012-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接">题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA13012" title="点击跳转至洛谷">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/13012" title="点击跳转至 UVa Online Judge">UVa Online Judge</a></p><h3 id="题目解析">题目解析</h3><p><s>太淼了</s>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;int t, a, b, c, d, e;while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）int ans = 0;//计数器if (a == t) ans++;//判断if (b == t) ans++;//同上if (c == t) ans++;//同上if (d == t) ans++;//同上if (e == t) ans++;//同上（草）cout &lt;&lt; ans &lt;&lt; endl;&#125;return 0;//完结撒花&#125;</code></pre><p>$$END$$</p><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/renyc/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/23/uva13012-solution/">https://ren-yc.github.io/2021/08/23/uva13012-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『教程』如何使（po）用（jie） IDM</title>
      <link href="/2021/08/12/how-to-use-idm/"/>
      <url>/2021/08/12/how-to-use-idm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言">前言</h3><p><s>众所周知</s>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><s><em>我很严肃</em>：</s></p><p><s><em>IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</em></s></p><h3 id="下载">下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装">安装</h3><p>运行下载的 <code>.exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解">破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 安装目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p><strong>方法同上</strong>。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” – “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://xn--9zr.tk/gx" alt=""></p><p>$$END$$</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/12/how-to-use-idm/">https://ren-yc.github.io/2021/08/12/how-to-use-idm/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『教程』WFR &amp; RBQ - 如何使用 Warfarin &amp; RBQScript</title>
      <link href="/2021/08/05/how-to-use-wfr-and-rbq/"/>
      <url>/2021/08/05/how-to-use-wfr-and-rbq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 github.com">帮助文档 &amp; Wiki</a></p><p>Warfarin 是一个由 C++ 编写而成的<strong>解释型</strong>语言。</p><p>RBQScript 是一个由 C++ 编写而成的<strong>编译型</strong>语言。</p><h3 id="特点">特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> / <code>.rbq</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md" title="点击跳转至 Github">这里（Warfarin）</a> 或 <a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md" title="点击跳转至 Github">这里（RBQScript）</a></p><h2 id="使用">使用</h2><p>Warfarin 目前最新版本：<strong>4.01</strong>（已停止更新，变更为 RBQScript 继续更新）</p><p>RBQScript 目前最新版本：<strong>4.12</strong></p><h3 id="下载-配置">下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin（RBQScript） C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-运行">编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code> / <code>fvm.exe</code></p></li><li><p>编译运行 <code>.wfr</code> / <code>.rbq</code> 源文件（请看下文）</p></li></ul><p>Warfarin（RBQScript） 的源文件扩展名一般为 <code>.wfr</code> / <code>.rbq</code>，</p><p>使用 <code>Warfarin.exe</code> / <code>fvm.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code> / <code>fvm -i 文件名 -cr/crj/crjp (-o 文件名.rbq)</code>，</p><p>此命令会编译出一个 <code>.ff0</code> / <code>.rbq</code> 字节码文件，相当于 C++ 的 <code>.exe</code> 文件，<s>但不能双击运行</s>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接">相关链接</h2><p><a href="/assets/ff0/Warfarin.zip" title="点击下载">本站下载链接（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script" title="点击跳转至 github.com">作者 GitHub 仓库（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/rbqscript" title="点击跳转至 github.com">作者 GitHub 仓库（RBQScript）</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt" title="点击跳转至 raw.githubusercontent.com">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin" title="点击跳转至 VSCode 插件商店">VSCode 插件（仅支持基础语言设置，咕咕）</a></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/">https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages - Warfarin &amp; RBQScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U187148 gcd 与 lcm</title>
      <link href="/2021/07/23/u187148-solution/"/>
      <url>/2021/07/23/u187148-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息">题目信息</h3><h4 id="题目描述">题目描述</h4><p>小 T 想编一个程序，<s>可是又想不出来怎么编</s>，请聪明的你来帮帮他。</p><p>这个程序可以用来计算两个数的最大公约数或最小公倍数。</p><h4 id="输入格式">输入格式</h4><p>第 $1$ 行输入一个正整数 $T$；</p><p>第 $2$ 到 $T + 1$ 行输入字符串 <code>gcd</code> 或 <code>lcm</code>，以及两个正整数 $a$ 和 $b$。</p><h4 id="输出格式">输出格式</h4><p>输出 $T$ 行结果。</p><h4 id="输入输出样例">输入输出样例</h4><h5 id="输入-1">输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>2gcd 1 1lcm 10 15</code></pre><h5 id="输出-1">输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>130</code></pre><h5 id="输入-2">输入 #2</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>5lcm 6 8gcd 2 10lcm 5 7gcd 1000 500lcm 10000000000 1</code></pre><h5 id="输出-2">输出 #2</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>24235500100000000000</code></pre><h4 id="提示说明">提示说明</h4><p><strong>本题采用捆绑测试</strong></p><p>对于 $100%$ 的数据：</p><p>$1 \le T \le 10^9$</p><table><thead><tr><th style="text-align:left">Subtask</th><th style="text-align:left">分值</th><th style="text-align:left">$a, b$</th></tr></thead><tbody><tr><td style="text-align:left">$1$</td><td style="text-align:left">$1$</td><td style="text-align:left">$= 1$</td></tr><tr><td style="text-align:left">$2$</td><td style="text-align:left">$9$</td><td style="text-align:left">$\le 10^2$</td></tr><tr><td style="text-align:left">$3$</td><td style="text-align:left">$20$</td><td style="text-align:left">$\le 10^5$</td></tr><tr><td style="text-align:left">$4$</td><td style="text-align:left">$30$</td><td style="text-align:left">$\le 10^9$</td></tr><tr><td style="text-align:left">$5$</td><td style="text-align:left">$40$</td><td style="text-align:left">$\le 10^{18}$</td></tr></tbody></table><p>Idea：任宇宸</p><p>Solution：任宇宸</p><p>Code：任宇宸</p><p>Data：任宇宸</p><h4 id="题目难度">题目难度</h4><p>$\textcolor{orange}{普及-}$</p><h4 id="题目地址（可能变更）">题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U187148" title="点击跳转至洛谷">洛谷</a></p><h3 id="题目解析">题目解析</h3><p>这是一道典型的数论题。</p><p>题目要求我们求某两个数的<strong>最大公约数</strong>或<strong>最小公倍数</strong>。</p><p><strong>由于 $a, b \le 10^{18}$，最坏 <code>lcm</code> 结果 $a \times b$，所以要使用 <code>unsigned long long</code></strong></p><h3 id="代码分析">代码分析</h3><p>输入字符串 $mode$，然后输入两个正整数 $a$ 和 $b$。</p><p>判断 $mode$ 是否为 <code>gcd</code> 或 <code>lcm</code>。</p><p>写一个求最大公约数的函数（或者<s>你不要脸的话</s>直接调用 <code>algorithm</code> 中的 <code>__gcd</code>）。</p><h3 id="代码">代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;unsigned long long gcd(long long a, long long b) &#123;if (a % b == 0) return (unsigned long long)b;else return gcd(b, a % b);&#125;unsigned long long lcm(long long a, long long b) &#123;return (unsigned long long)a * (unsigned long long)b / gcd(a, b);&#125;int main() &#123;long long T, a, b;string mode;cin &gt;&gt; T;while (T--) &#123;cin &gt;&gt; mode &gt;&gt; a &gt;&gt; b;if (mode == &quot;gcd&quot;) &#123;cout &lt;&lt; gcd(a, b) &lt;&lt; endl;&#125; else &#123;cout &lt;&lt; lcm(a, b) &lt;&lt; endl;&#125;&#125;return 0;&#125;</code></pre><p>$$END$$</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/07/23/u187148-solution/">https://ren-yc.github.io/2021/07/23/u187148-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
