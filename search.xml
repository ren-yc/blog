<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『记录』在 Ubuntu (WSL2) 上安装 PyTorch</title>
      <link href="/2022/11/05/pytorch-ubuntu-installation/"/>
      <url>/2022/11/05/pytorch-ubuntu-installation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本蒟蒻发现 Windows 对某些深度学习框架例如 PyTorch 的支持不够完善，遂想到使用 WSL2 模拟 Ubuntu 环境进行深度学习模型训练与推理。</p><h3 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li><p>Ubuntu 22.04.1 (WSL2)</p></li><li><p>Miniconda3 4.12.0 (Python 3.8)</p></li><li><p>CUDA Toolkit 11.6.2 (WSL2)</p></li></ul><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul><li><p>PyTorch 1.12.1 (GPU)</p></li><li><p>PyTorch Vision 0.13.1 (GPU)</p></li><li><p>PyTorch Audio 0.12.1 (GPU)</p></li></ul><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h4 id="安装-CUDA-Toolkit"><a href="#安装-CUDA-Toolkit" class="headerlink" title="安装 CUDA Toolkit"></a>安装 CUDA Toolkit</h4><p>若在您的 WSL2 中执行下列命令有正确的 NVCC 版本号，则可忽略这一步骤：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ nvcc -V</code></pre><p>首先到 <a href="https://developer.nvidia.com/cuda-11-6-2-download-archive">CUDA Toolkit 11.6 Update 2 Downloads (NVIDIA 官方)</a> 下载 Linux 版的安装程序（建议使用 Local Runfile）。</p><p>例如：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ wget https://developer.download.nvidia.com/compute/cuda/11.6.2/local_installers/cuda_11.6.2_510.47.03_linux.run$ sudo sh cuda_11.6.2_510.47.03_linux.run</code></pre><p>执行后等待一会儿会出现安装界面，同意许可协议后，选择 <code>Install</code> 进行安装。</p><p>安装完成后会提示在 <code>~/.bashrc</code> 配置文件中将 CUDA 的 <code>bin</code> 目录加入环境变量 <code>$PATH</code>，按照下列命令操作即可：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ vim ~/.bashrc</code></pre><p>添加几行配置：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">export PATH=/usr/local/cuda-11.6/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;export LD_LIBRARY_PATH=/usr/local/cuda-11.6/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</code></pre><p><img src="./cuda-path.png" alt=""></p><p>然后按下 <code>ESC</code> 输入 <code>:wq</code> 对配置文件进行保存。</p><p>执行以下命令或重新打开 Bash 后查看 NVCC 的版本是否正常：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ source ~/.bashrc$ nvcc -V</code></pre><p>完成安装 CUDA Toolkit！</p><h4 id="安装-Miniconda3"><a href="#安装-Miniconda3" class="headerlink" title="安装 Miniconda3"></a>安装 Miniconda3</h4><p>先从 Anaconda 官网下载对应 Miniconda 版本的 Linux Shell 可执行脚本文件，如：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh</code></pre><p>再赋予其可执行权限并执行：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ sudo chmod +x Miniconda3-py38_4.12.0-Linux-x86_64.sh$ ./Miniconda3-py38_4.12.0-Linux-x86_64.sh</code></pre><p>安装时许可协议和安装配置都按 <code>ENTER</code> 或输入 <code>yes</code>，默认配置不用改变。</p><p><strong>安装后，务必修改 <code>~/.bashrc</code> 文件并重启 Bash，否则在未激活 Conda 虚拟环境中的 Python 仍会与原有 Python 冲突：</strong></p><p><img src="./miniconda-bashrc.png" alt=""></p><p>重启 Bash 后，进行更换 Conda 下载源的操作。</p><p>新建 <code>~/.condarc</code> 文件并加入以下内容：</p><p class="code-caption" data-lang="yaml" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-yaml">channels: # 通道列表  - defaultsshow_channel_urls: true # 下载时显示通道的 URLdefault_channels: # 默认通道链接 (常规)  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/custom_channels: # 自定义通道连接 (PyTorch 相关)  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloudauto_activate_base: false # 启动 Bash 时不自动激活 base 虚拟环境</code></pre><p>大功告成！</p><h3 id="安装-PyTorch"><a href="#安装-PyTorch" class="headerlink" title="安装 PyTorch"></a>安装 PyTorch</h3><p>打开 <a href="https://pytorch.org/get-started/previous-versions/">PyTorch 官网</a>，找到目标 PyTorch 版本并执行对应命令：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.6 -c pytorch -c conda-forge</code></pre><p>若安装失败，则使用 PIP 加载预构建 Wheel 安装：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu116</code></pre><p><strong>若下载过慢可手动下载，并使用下列命令加载 Wheel：</strong></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ pip install torch-1.12.1+cu116-cp38-cp38-linux_x86_64.whl torchvision-0.13.1+cu116-cp38-cp38-linux_x86_64.whl torchaudio-0.12.1+cu116-cp38-cp38-linux_x86_64.whl</code></pre><p>至此安装过程全部结束。</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>打开 Conda 虚拟环境下的 Python，在交互式解释器中输入下列代码并执行：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">from torch import cudaprint(cuda.is_available())</code></pre><p>若返回值为 <code>True</code>，则安装无问题。</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/11/05/pytorch-ubuntu-installation/">https://ren-yc.github.io/2022/11/05/pytorch-ubuntu-installation/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA12592 Identifying tea</title>
      <link href="/2022/10/29/uva12592-solution/"/>
      <url>/2022/10/29/uva12592-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA12592">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/12592">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>王子去找公主，遇到处决犯人，这时人们在喊口号，王子把口号告诉公主，监斩官喊出口号时，公主也要喊出该口号。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>使用键值映射容器 <code>map&lt;string, string&gt;</code>，将公主应喊的口号映射到监斩官喊的口号。</p><p>可以使用 STL <code>map</code> 容器提供的 <code>[]</code> 运算符简便地进行操作。</p><p><strong>注意若要在 <code>cin</code> 后使用 <code>getline</code>，务必在两者之间执行 <code>cin.ignore()</code>。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, q;string a, b;map&lt;string, string&gt; mp; // STL map 容器int main() &#123;    cin &gt;&gt; n;    cin.ignore(); // 切记    while (n--) &#123;        getline(cin, a);        getline(cin, b);        mp[a] = b; // 使用 [] 运算符进行映射操作    &#125;    cin &gt;&gt; q;    cin.ignore(); // 切记    while (q--) &#123;        getline(cin, a);        cout &lt;&lt; mp[a] &lt;&lt; endl; // 使用 [] 运算符读取并输出    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva12592">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/10/29/uva12592-solution/">https://ren-yc.github.io/2022/10/29/uva12592-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『教程』如何升级 Ubuntu 到 22.04 LTS</title>
      <link href="/2022/06/29/how-to-upgrade-to-ubuntu-jammy-jellyfish/"/>
      <url>/2022/06/29/how-to-upgrade-to-ubuntu-jammy-jellyfish/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2022 年 4 月中下旬，Ubuntu 新的一个 LTS 长期支持版本 22.04 发布了。</p><p><del>而作为 IT 狂热爱好者怎能不升级呢？</del></p><p>于是就开始努力<del>作死</del>尝试把手头上的 WSL 2 Ubuntu 20.04 升级。</p><p><strong>若您在这之前还未安装 Ubuntu 的旧版本，可以直接从 Microsoft Store / WSL 安装 Ubuntu 22.04 LTS。</strong></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>WSL 2</p></li><li><p>Ubuntu</p></li></ul><h3 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h3><p>使用下列命令获取软件更新。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ sudo apt update</code></pre><p>再使用下列命令升级软件。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ sudo apt upgrade</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用下列命令打开系统升级版本配置文件。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ sudo vim /etc/update-manager/release-upgrades</code></pre><p>请保证最后一行<strong>不</strong>为下列内容，否则将无法更新系统版本。</p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>Prompt=never</code></pre><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>若在您当前的日期 Ubuntu 暂未推送 22.04 LTS，请在命令之后加入选项 <code>-d</code> 以强制使用开发版本。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ sudo do-release-upgrade</code></pre><p>若提示是否要开始升级系统版本，请输入 <code>Y</code> 确认。</p><p><img src="./start.png" alt=""></p><p><strong>若提示需要 Reboot，请用管理员模式打开 PowerShell，运行下列命令，因为 WSL 2 本质上是虚拟机没法直接重启。</strong></p><p><strong>运行中的 Ubuntu 将自动终止，再次打开即可完成这一操作。</strong></p><p class="code-caption" data-lang="shell" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-shell">PS C:\&gt; Get-Service LxssManager | Restart-Service</code></pre><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>过大概二十分钟（取决于网速及计算机性能）后，Ubuntu 会提示无法自动 Reboot，请再次使用上述命令完成这一操作。</p><p>最后，可以运行 <code>neofetch</code> 软件查看系统信息（需先安装此软件）。</p><p><img src="./finish.png" alt=""></p><p>至此就全部完成了，若有任何疑问欢迎回复！</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/06/29/how-to-upgrade-to-ubuntu-jammy-jellyfish/">https://ren-yc.github.io/2022/06/29/how-to-upgrade-to-ubuntu-jammy-jellyfish/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1692A Marathon</title>
      <link href="/2022/06/22/cf1692a-solution/"/>
      <url>/2022/06/22/cf1692a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1692A">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1692/A">Codeforces</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>直接按照题意模拟即可。</p><p>分别判断 $b, c, d$ 是否 $\gt$ $a$，并将条件成立的次数输出。</p><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>通过 <code>while (t--)</code> 实现 $t$ 组数据的输入（前提为不需输出测试组序号）。</p><p>记得每轮前把 <code>cnt</code> 清零。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int t, a, b, c, d, cnt; // 个人习惯全局int main() &#123;    cin &gt;&gt; t; // 读入测试组数    while (t--) &#123; // 测试组数        cnt = 0; // 清零        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d; // 读入        if (b &gt; a) &#123; // 分别判断            cnt++;        &#125;        if (c &gt; a) &#123;            cnt++;        &#125;        if (d &gt; a) &#123;            cnt++;        &#125;        cout &lt;&lt; cnt &lt;&lt; endl; // 输出    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf1692a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/06/22/cf1692a-solution/">https://ren-yc.github.io/2022/06/22/cf1692a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11278 One-Handed Typist</title>
      <link href="/2022/06/02/uva11278-solution/"/>
      <url>/2022/06/02/uva11278-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11278">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11278">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>给定若干行<strong>可能包含空格的</strong>字符串，按照题面后两张图片的方法（简单加密）来进行对字符串的每个元素进行变换。</p><h3 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h3><p>我们可以定义两个常量字符串作为键值对（当然也可以使用 <code>map &lt;char, char&gt;</code>）。</p><p>若使用常量字符串，则可以查找出该元素在键值字符串中的位置，并使用该下标访问该键值的值，就可以得出该元素在解密后的值。</p><h3 id="代码要点"><a href="#代码要点" class="headerlink" title="代码要点"></a>代码要点</h3><ul><li><p><code>while (getline(任意输入流, basic_string &lt;该输入流所支持的字符类型&gt;))</code>。</p><ul><li>读入若干个整行带空格的字符串直到 EOF。</li></ul></li><li><p><code>basic_string &lt;任意类型&gt;.find(该类型)</code></p><ul><li>查找该类型的字符串中某个元素的位置，若不存在则返回 <code>string::npos</code>。</li></ul></li></ul><p><strong>附注：<code>string</code> 本质上是 <code>basic_string &lt;char&gt;</code>。</strong></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt; // 万能头using namespace std; // 标准命名空间const string s1 = &quot; `1234567890-=qwertyuiop[]\\asdfghjkl;&#39;zxcvbnm,./~!@#$%^&amp;*()_+QWERTYUIOP&#123;&#125;|ASDFGHJKL:\&quot;ZXCVBNM&lt;&gt;?&quot;; // 键值const string s2 = &quot; `123qjlmfp/[]456.orsuyb;=\\789aehtdck-0zx,inwvg&#39;~!@#QJLMFP?&#123;&#125;$%^&gt;ORSUYB:+|&amp;*(AEHTDCK_)ZX&lt;INWVG\&quot;&quot;; // 键值的值string in; // 输入的字符串int main() &#123;    while (getline(cin, in)) &#123; // 使用此方法可读入若干行带空格字符串直到 EOF        for (int i = 0; i &lt; (int)in.size(); i++) &#123; // 遍历            cout &lt;&lt; s2[s1.find(in[i])]; // 求出解密后的值        &#125;        cout &lt;&lt; endl; // 记得换行    &#125;    return 0; // 返回运行无误&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11278">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/06/02/uva11278-solution/">https://ren-yc.github.io/2022/06/02/uva11278-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11581 Grid Successors</title>
      <link href="/2022/06/02/uva11581-solution/"/>
      <url>/2022/06/02/uva11581-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11581">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11581">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>定义 $f()$ 为把矩阵的每一个元素替换为它相邻的元素之和对 $2$ 取模所得的结果。</p><p>给定一个 $n$ 组 $3 \times 3$ 的仅包含 $0$ 和 $1$ 的矩阵，求经过多少次 $f()$ 后矩阵的每一个元素都为 $0$，若无需变换则输出 $-1$。</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>我们可以按照题意模拟 $f()$ 并在每次变换之后检测矩阵的元素是否全部为 $0$，最终输出变换的次数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int n, ans;int g[3][3];void func() &#123;    int h[3][3];    h[0][0] = (g[0][1] + g[1][0]) % 2; // 模拟矩阵变换    h[0][1] = (g[0][0] + g[1][1] + g[0][2]) % 2;    h[0][2] = (g[0][1] + g[1][2]) % 2;    h[1][0] = (g[0][0] + g[1][1] + g[2][0]) % 2;    h[1][1] = (g[0][1] + g[1][0] + g[1][2] + g[2][1]) % 2;    h[1][2] = (g[1][1] + g[0][2] + g[2][2]) % 2;    h[2][0] = (g[2][1] + g[1][0]) % 2;    h[2][1] = (g[2][0] + g[1][1] + g[2][2]) % 2;    h[2][2] = (g[2][1] + g[1][2]) % 2;    for (int i = 0; i &lt; 3; i++) &#123;        for (int j = 0; j &lt; 3; j++) &#123;            g[i][j] = h[i][j]; // 最后再赋值        &#125;    &#125;&#125;bool isZero() &#123;    for (int i = 0; i &lt; 3; i++) &#123;        for (int j = 0; j &lt; 3; j++) &#123;            if (g[i][j] == 1) &#123;                return false; // 一旦有非零（为 1）的元素则直接返回假            &#125;        &#125;    &#125;    return true; // 没有非零（为 1）的元素&#125;int main() &#123;    cin &gt;&gt; n;    while (n--) &#123;        ans = -1; // 计数器初始化        for (int i = 0; i &lt; 3; i++) &#123;            for (int j = 0; j &lt; 3; j++) &#123;                char ch; // 这里使用字符进行读取并转换为整型                cin &gt;&gt; ch;                g[i][j] = ch - &#39;0&#39;; // 转换            &#125;        &#125;        while (!isZero()) &#123; // 切记要用 while，不断变换直到全部为零            func(); // 变换            ans++; // 次数        &#125;        cout &lt;&lt; ans &lt;&lt; endl; // 输出    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11581">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/06/02/uva11581-solution/">https://ren-yc.github.io/2022/06/02/uva11581-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11713 Abstract Names</title>
      <link href="/2022/06/01/uva11713-solution/"/>
      <url>/2022/06/01/uva11713-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11713">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11713">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>给定 $n$ 组数据，每组包含两个字符串，若这两个字符串去掉元音（位置相同内容可不同）后是否完全相同。</p><p>元音：即 <code>a</code> 或 <code>i</code> 或 <code>e</code> 或 <code>o</code> 或 <code>u</code>。</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>由元音每对位置相同可知输入的字符串长度一定相等，所以我们可以在输入后进行字符串长度比较。</p><p>然后遍历两个字符串的每一个元素，若相同则直接忽略（因为是不是元音都不影响最后的结论）；若不同则判断是否其中有且仅有一者是元音，若成立则这个字符串不满足条件。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt; // 万能头（注意 MSVC 没有）using namespace std; // 小型代码用这个（大型项目可能会和第三方库命名空间冲突）int n;bool flag;string s1, s2; // 全局变量inline bool check(char ch) &#123; // 使用函数简化    return ch == &#39;a&#39; || ch == &#39;i&#39; || ch == &#39;e&#39; || ch == &#39;o&#39; || ch == &#39;u&#39;;&#125;int main() &#123; // 控制台窄字符参数用 main（是不是太详细了）    cin &gt;&gt; n;    cin.ignore(); // cin 和 getline 之间要忽略换行符    while (n--) &#123;        flag = true; // 每轮初始值        getline(cin, s1); // 这里我不知道它是不是带空格的所以用了 getline        getline(cin, s2);        if (s1.size() != s2.size()) &#123;            flag = false; // 这里可以直接跳到输出        &#125;        for (int i = 0; i &lt; (int)s1.size(); i++) &#123;            if (s1[i] != s2[i]) &#123;                if (!check(s1[i]) || !check(s2[i])) &#123;                    flag = false; // 这里也可以直接跳出循环                &#125;            &#125;        &#125;        if (flag) &#123; // 输出结论            cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11713">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/06/01/uva11713-solution/">https://ren-yc.github.io/2022/06/01/uva11713-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10193 All You Need Is Love</title>
      <link href="/2022/05/17/uva10193-solution/"/>
      <url>/2022/05/17/uva10193-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10193">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10193">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>一个人给出一个二进制字符串 $S_1$，机器再给出另一个字符串 $S_2$，若一直从 $S_1$ 和 $S_2$ 中分别减去若干个 $L$ 能正好为 $L$，则输出 <code>All you need is love!</code>，反之则输出 <code>Love is not all you need!</code>。</p><p><strong>“减法”指与十进制类似的在二进制中使用的减法运算。</strong></p><p>数据保证输入的二进制字符串不含有前导零。</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>将题意用通俗的语言表示：</p><p>判断将它们分别转化为十进制数后是否互质。</p><h3 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h3><p>求最大公约数可以使用 C++ 标准库头文件中的 <code>__gcd()</code> 或使用自己手写的函数。</p><p><strong><code>bin2dec()</code> 函数的 <code>string</code> 类形参可加 <code>&amp;</code> 取地址符也可不加，具体可以参见 <a href="http://t.csdn.cn/Z3kVY">C++ 中 string 作为参数的传递（string 类型的引用）</a>。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt; // 万能头using namespace std; // 引入 C++ 标准命名空间int n, a, b;string s1, s2;int bin2dec(const string &amp;s) &#123; // 模板    int res = 0, cnt = 0; // 记得赋初值    for (int i = (int)s.size() - 1; i &gt;= 0; i--) &#123; // 逆序遍历二进制字符串        if (s[i] == &#39;1&#39;) &#123; // 如果此位的二进制字符串为 1            res += (int)pow(2, cnt); // 将进制的当前位数次幂加入十进制结果        &#125;        cnt++; // 下一个二进制字符串的位置    &#125;    return res; // 返回十进制结果&#125;int main() &#123;    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++) &#123; // 建议此题不要使用 while (n--)        cin &gt;&gt; s1 &gt;&gt; s2; // 输入二进制字符串        a = bin2dec(s1); // 转换        b = bin2dec(s2); // 同上        cout &lt;&lt; &quot;Pair #&quot; &lt;&lt; i &lt;&lt; &quot;: &quot;; // 格式        if (__gcd(a, b) != 1) &#123; // 判断是否互质            cout &lt;&lt; &quot;All you need is love!&quot; &lt;&lt; endl;        &#125; else &#123; // 反之            cout &lt;&lt; &quot;Love is not all you need!&quot; &lt;&lt; endl;        &#125;    &#125;    return 0; // 好习惯&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva10193">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/05/17/uva10193-solution/">https://ren-yc.github.io/2022/05/17/uva10193-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11498 Division of Nlogonia</title>
      <link href="/2022/05/17/uva11498-solution/"/>
      <url>/2022/05/17/uva11498-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11498">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11498">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>给定基准点的坐标和若干个点，请你输出它分别与基准点的位置关系。</p><ul><li><p>若点的位置与基准点在一条水平线或垂直线上，输出 <code>divisa</code>（即 $n = x$ 或 $m = y$）。</p></li><li><p>若点的位置在基准点的西北，输出 <code>NO</code>（即 $n &gt; x$ 且 $m &gt; y$）。</p></li><li><p>若点的位置在基准点的东北，输出 <code>NE</code>（即 $n &gt; x$ 且 $m &lt; y$）。</p></li><li><p>若点的位置在基准点的东南，输出 <code>SE</code>（即 $n &lt; x$ 且 $m &gt; y$）。</p></li><li><p>若点的位置在基准点的西南，输出 <code>SO</code>（即 $n &lt; x$ 且 $m &lt; y$）。</p></li></ul><p><strong>$k = 0$ 则结束输入。</strong></p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>直接按照基准点与若个点的坐标值分别进行比较即可。</p><p>我们可以运用 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code> / <code>while (cin &gt;&gt; n)</code> 重复输入直到 EOF。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int k, n, m, x, y;int main() &#123;    while (cin &gt;&gt; k) &#123; // 重复输入直到 EOF        if (k == 0) &#123; // 判断 k 是否为 0            break; // 跳出循环        &#125;        cin &gt;&gt; n &gt;&gt; m; // 输入基准点坐标        for (int i = 1; i &lt;= k; i++) &#123; // 可使用 while (k--) 代替            cin &gt;&gt; x &gt;&gt; y; // 输入若干个点的坐标            if (x == n || y == m) &#123; // 在一条水平线或垂直线上                cout &lt;&lt; &quot;divisa&quot; &lt;&lt; endl;            &#125; else if (x &lt; n &amp;&amp; y &lt; m) &#123; // 西南                cout &lt;&lt; &quot;SO&quot; &lt;&lt; endl;            &#125; else if (x &lt; n &amp;&amp; y &gt; m) &#123; // 西北                cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;            &#125; else if (x &gt; n &amp;&amp; y &lt; m) &#123; // 东南                cout &lt;&lt; &quot;SE&quot; &lt;&lt; endl;            &#125; else if (x &gt; n &amp;&amp; y &gt; m) &#123; // 东北                cout &lt;&lt; &quot;NE&quot; &lt;&lt; endl;            &#125;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11498">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/05/17/uva11498-solution/">https://ren-yc.github.io/2022/05/17/uva11498-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『规范』Class Tools Develop Team 团队规则</title>
      <link href="/2022/04/04/class-tools-develop-team-rule/"/>
      <url>/2022/04/04/class-tools-develop-team-rule/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="The password is incorrect. Please try again." data-whm="Unknown error, please report to the blog administrator!">  <script id="hbeData" type="hbeData" data-hmacdigest="3adcb886a962f4f4b23285adf85dc73749b2169a40bc1ab599d14a584bd4c925"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Please enter the password.">Please enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Rules - Team </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『置顶』『教程』Class Tools 简介</title>
      <link href="/2022/03/29/guide-of-class-tools/"/>
      <url>/2022/03/29/guide-of-class-tools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Class Tools 系列应用是 <a href="https://github.com/class-tools/">Class Tools Develop Team</a> 使用 C++ / Python 等常见编程语言开发的，均开放源代码并使用 <a href="https://opensource.org/licenses/MIT">MIT 许可证</a>。</p><p>这个团队是 <a href="https://github.com/ren-yc/">ren-yc</a> 为提升课堂的高效、趣味性而设计的一系列辅助应用，最初只有 <a href="https://github.com/class-tools/RandomRollCall/">Random Roll Call (随机点名)</a> 一个应用。</p><p>目前，这个团队已经有 5+ 位开发人员、5+ 位测试人员，欢迎您的加入！（具体加入方法请见文章底部）</p><p>我们也欢迎各位为我们提供建议。（具体提供方法请见文章底部）</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>每个开发完成的应用均有一个 Releases (发布) 页面。</p><p>下图中红框部分就是 Releases 页面的入口。</p><p><img src="./releases-enter.png" alt=""></p><p>最新版本的说明以及安装程序的下载链接都在 Releases 中。</p><p>如下图中红框部分。</p><p><img src="./releases-info.png" alt=""></p><p><strong>提示：大部分安装程序都是 <code>x64</code> 的（若无后缀 <code>x86</code> / <code>ARM</code> / <code>ARM64</code>），小部分支持 <code>x86</code> / <code>ARM</code> / <code>ARM64</code>，请仔细辨别后再下载。</strong></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>双击运行下载后的安装程序即可。若安装后程序无法正常运行，请尝试重新安装，确认上述方法均无效后可发送邮件至 <a href="mailto:ldfx_ryc@163.com" title="点击使用默认邮件客户端向 ldfx_ryc@163.com 发送邮件">ldfx_ryc@163.com</a> 寻求技术人员的支持（具体格式请见文章底部）。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>每个应用基本上均配有 Wiki 页面，具体位置见下图。</p><p><img src="./wiki-enter.png" alt=""></p><p>进入后有详细的说明介绍。</p><p><img src="./wiki-info.png" alt=""></p><h3 id="有用的信息"><a href="#有用的信息" class="headerlink" title="有用的信息"></a>有用的信息</h3><p><a href="https://class-tools.github.io/">官方网站</a></p><p><a href="https://github.com/class-tools/">GitHub 组织</a></p><p><a href="mailto:ldfx_ryc@163.com">负责人 E-mail</a></p><p>报告错误邮件格式（建议在该项目存储库 Issues 中报告）：</p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>应用：xxx版本：xxx系统版本：xxx截图（如果有）：xxx详细说明：xxx联系方式（默认为发送邮箱）：xxx</code></pre><p>提供建议邮件格式（建议在该项目存储库 Issues 中报告）：</p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>应用：xxx草图（如果有）：xxx详细说明：xxx联系方式（默认为发送邮箱）：xxx</code></pre><h3 id="申请加入-Class-Tools-Develop-Team"><a href="#申请加入-Class-Tools-Develop-Team" class="headerlink" title="申请加入 Class Tools Develop Team"></a>申请加入 Class Tools Develop Team</h3><p>若您对本团队感兴趣，可加入 <a href="https://jq.qq.com/?_wv=1027&amp;k=PYH4ldDF">Class Tools Develop Team QQ 分群</a> 进行交流合作（门槛低于“测试组”）。</p><h4 id="开发组"><a href="#开发组" class="headerlink" title="开发组"></a>开发组</h4><p>首先，请确保您有着扎实的计算机使用与代码编写能力。其次，请确保您对软件开发有兴趣且专门学习过任意计算机语言（列表见下）。然后，加入后需遵守一系列的规范及要求（包括但不限于代码格式方面）。最后，您应有足够的时间来对我们的项目作贡献。</p><div class="table-container"><table><thead><tr><th style="text-align:center">计算机语言名称 $/$ 计算机代码工具</th><th style="text-align:center">权重</th></tr></thead><tbody><tr><td style="text-align:center">$\text{Java}$ $\text{(Common / Windows API / GUI)}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$</td></tr><tr><td style="text-align:center">$\text{Python}$ $\text{(Common / GUI / Network / AI (All))}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$ $/$ $5$</td></tr><tr><td style="text-align:center">$\text{C / C++ / C}\sharp$ $\text{(Common / Windows API / Data Files IO / AI (CV))}$</td><td style="text-align:center">$2$ $/$ $3$ $/$ $4$ $/$ $5$</td></tr><tr><td style="text-align:center">$\text{Git}$ $\text{(All)}$</td><td style="text-align:center">$5$</td></tr><tr><td style="text-align:center">$\text{GitHub}$ $\text{(All)}$</td><td style="text-align:center">$5$</td></tr></tbody></table></div><p><strong>注：当对于您擅长的计算机语言的权重之和 $\ge$ $15$ 时，可申请加入。</strong></p><p>当您确认要加入开发组后，请附 <a href="./Class%20Tools%20Develop%20Team%20%E5%85%A5%E5%9B%A2%E7%94%B3%E8%AF%B7%E8%A1%A8.docx">Class Tools Develop Team 入团申请表.docx</a> 向 <a href="mailto:ldfx_ryc@163.com?subject=%E7%94%B3%E8%AF%B7%E5%8A%A0%E5%85%A5%E5%BC%80%E5%8F%91%E7%BB%84">ldfx_ryc@163.com</a> 发送邮件，我们的管理员会在 3 个工作日内做出回复。</p><h4 id="测试组"><a href="#测试组" class="headerlink" title="测试组"></a>测试组</h4><p>本组的加入门槛较低，您只需有足够的时间接收来自开发组的测试请求（频率为正常工作周 0 ~ 3 次、假期周 0 ~ 5 次，测试项目不限，可仅专注测试某个项目）。</p><p>使用 Mac OS / ARM 架构 CPU / 精通虚拟机者优先。</p><p>当您确认要加入测试组后，请发送邮件至 <a href="mailto:ldfx_ryc@163.com?subject=%E7%94%B3%E8%AF%B7%E5%8A%A0%E5%85%A5%E6%B5%8B%E8%AF%95%E7%BB%84">ldfx_ryc@163.com</a>，邮件内容注明您使用的主机配置信息（若使用虚拟机，则注明可测试的系统镜像版本）、联系方式（GitHub 账号及其它），我们的管理员会在 7 个工作日内做出回复。</p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/03/29/guide-of-class-tools/">https://ren-yc.github.io/2022/03/29/guide-of-class-tools/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Self Developed </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『教程』GitHub &amp; Git 入门指南</title>
      <link href="/2022/03/05/guide-of-github/"/>
      <url>/2022/03/05/guide-of-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文适合刚使用 GitHub &amp; Git 的开发者参考。</strong></p><h2 id="什么是-GitHub"><a href="#什么是-GitHub" class="headerlink" title="什么是 GitHub"></a>什么是 GitHub</h2><p>GitHub 是世界上最大的代码托管平台，超 5 千万开发者正在使用。被称为开发者最大的社区。因只支持 Git 作为唯一的版本库格式进行托管而被取名为 GitHub。</p><h2 id="Git-入门"><a href="#Git-入门" class="headerlink" title="Git 入门"></a>Git 入门</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从 <a href="http://git-scm.com/downloads">此处</a> 选择合适的平台版本安装即可。</p><p>可以输入以下命令进行验证。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ git --version</code></pre><h3 id="配置个人信息"><a href="#配置个人信息" class="headerlink" title="配置个人信息"></a>配置个人信息</h3><p><code>user.name</code> 是你注册 GitHub 的用户名。</p><p><code>user.email</code> 是你注册 GitHub 的邮箱。</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ git config --global user.name &quot;yourname&quot;$ git config --global user.email yourname@example.com</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><code>git init</code></h4><p><code>git init</code> 用于初始化本地存储库。</p><p>即创建一个包含存储库信息的<strong>隐藏状态</strong> <code>.git</code> 文件夹。</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h4><p><code>git add $&#123;filename&#125;</code> 用于添加指定文件至暂存区。</p><p>一般使用 <code>git add .</code> 用于添加除在 <code>.gitignore</code> 文件中注明忽略的文件外的所有文件。</p><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h4><p><code>git commit</code> 用于清除暂存区文件并提交。</p><p>用法 1：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ git commit</code></pre><p>然后命令行会调用 vim 进行提交信息的多行输入。</p><p><strong>一般第一行为标题，第二行为空，第三行为附加内容。</strong></p><p>用法 2：</p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-bash">$ git commit -m &quot;$&#123;commit message&#125;&quot;</code></pre><p><code>$&#123;commit message&#125;</code> 为提交信息。（即多行提交信息的标题）</p><p><strong>最常用的有这 2 种用法。</strong></p><p><strong>上述用法均可带 <code>-S</code> 参数以使用 GPG 签名认证提交。（具体配置本文暂不说明）</strong></p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><code>git clone</code></h4><p><code>git clone $&#123;remote repository url&#125;</code> 为把远程 Git 仓库克隆至本地。</p><p><strong><code>$&#123;remote repository url&#125;</code> 可为 HTTP 或 SSH。（一般来说 SSH 在国内更快）</strong></p><p>SSH 需生成密钥后才可使用。（具体配置本文暂不说明）</p><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h4><p><code>git remote add $&#123;origin repository short name&#125; $&#123;remote repository url&#125;</code> 用于配置远程存储库以进行远程操作。</p><p>一般来说 <code>$&#123;origin repository short name&#125;</code> 为 <code>origin</code>。</p><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h4><p><code>git push $&#123;origin repository short name&#125; $&#123;branch&#125;</code> 用于同步本地存储库至远程存储库。</p><p><code>$&#123;origin repository short name&#125;</code> 使用与 <code>git remote</code> 配置的 <code>$&#123;origin repository short name&#125;</code> 一样。</p><p><code>$&#123;branch&#125;</code> 为远程存储库的分支。</p><p><strong>切记 <code>$&#123;branch&#125;</code> 分支要在远程存储库存在，否则会报错。</strong></p><p><strong>本文持续更新……</strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/03/05/guide-of-github/">https://ren-yc.github.io/2022/03/05/guide-of-github/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10281 Average Speed</title>
      <link href="/2022/01/17/uva10281-solution/"/>
      <url>/2022/01/17/uva10281-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10281">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10281">UVa Online Judge</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><a href="https://www.runoob.com/cprogramming/c-function-sscanf.html">sscanf() 的用法</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出时间和速度，计算所走的路程。<del>（超级简洁是不是？）</del></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题是一道计算题，依据公式模拟即可。</p><p>将前面的速度与时间和现在的分别存放，最后计算即可。</p><p><strong>本题重点：</strong></p><ul><li>本题的输入格式较特殊，需要先读入一行整个字符串然后再通过 <code>sscanf()</code> 函数进行拆分。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>详细思路在注释中</strong></p><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    char tmp[101];//sscanf() 仅支持字符数组    int sum, hour, minute, second, t_prv = 0, t_nxt = 0;//英语自行理解    double distance = 0.0, v_prv = 0.0, v_nxt = 0.0;//记得要加 &quot;.0&quot;    while (gets(tmp)) &#123;//字符数组读入用 gets()        sum = sscanf(tmp, &quot;%d:%d:%d %lf&quot;, &amp;hour, &amp;minute, &amp;second, &amp;v_nxt);//sscanf() 的返回值为拆分的个数        t_nxt = hour * 3600 + minute * 60 + second;//计算        distance += v_prv * (t_nxt - t_prv) / 3600.0;//距离        t_prv = t_nxt;//更新值        if (sum == 3) &#123;//如果拆 3 块            printf(&quot;%.2d:%.2d:%.2d %.2lf km\n&quot;, hour, minute, second, distance);//注意格式        &#125; else &#123;            v_prv = v_nxt;//更新值        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva10281">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/17/uva10281-solution/">https://ren-yc.github.io/2022/01/17/uva10281-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U198288 元素插入</title>
      <link href="/2022/01/17/u198288-solution/"/>
      <url>/2022/01/17/u198288-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>指定位置的插入：</p><p>在一个数组的第 $x$ 位置<strong>前</strong>插入一个新的 $y$。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一个有一个整数 $n$;</p><p>第二行有 $n$ 个整数 $a_i$；</p><p>第三行有一个整数 $x$；</p><p>第四行有一个整数 $y$，为要插入的整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>元素插入后的 $a_i$ $\sim$ $a_{n+i}$。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>57 2 3 4 529</code></pre><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>7 9 2 3 4 5</code></pre><h4 id="提示说明"><a href="#提示说明" class="headerlink" title="提示说明"></a>提示说明</h4><p><strong>本题采用捆绑测试</strong></p><p>对于 $100\%$ 的测试点：</p><p>$1$ $\le$ $x$ $\le$ $n$ $\le$ $10^2$，</p><p>$1$ $\le$ $a_i,y$ $\le$ $10^9$。</p><div class="table-container"><table><thead><tr><th style="text-align:left">Subtask</th><th style="text-align:left">分值</th><th style="text-align:left">特殊范围</th></tr></thead><tbody><tr><td style="text-align:left">$0$</td><td style="text-align:left">$10$</td><td style="text-align:left">$x = 1$</td></tr><tr><td style="text-align:left">$1$</td><td style="text-align:left">$10$</td><td style="text-align:left">$x = n$</td></tr><tr><td style="text-align:left">$2$</td><td style="text-align:left">$80$</td><td style="text-align:left"><strong>无特殊范围</strong></td></tr></tbody></table></div><p>Idea：贾小宇</p><p>Solution：任宇宸</p><p>Code：贾小宇</p><p>Data：任宇宸</p><h4 id="题目难度"><a href="#题目难度" class="headerlink" title="题目难度"></a>题目难度</h4><p>$\textcolor{red}{入门}$</p><h4 id="题目地址（可能变更）"><a href="#题目地址（可能变更）" class="headerlink" title="题目地址（可能变更）"></a>题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U198288">洛谷</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>简单模拟，不用多说了。</p><p>我们可以将在这个数组 $a_n$ 种插入元素分为 $2$ 种情况：</p><ol><li><p>在元素 $a_0$ 前</p></li><li><p>在数组 $a_n$ 的中间</p></li></ol><p>这题也没必要骗 $\text{Subtask}$ 的分。（尽管部分分很多）</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>不用专门写一个插入元素的函数，直接全输入完然后遍历输出，当前下标为要插入元素的下标时，多输出要插入的那个元素即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int n, x, y, a[101] = &#123;0&#125;;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i];    &#125;    cin &gt;&gt; x &gt;&gt; y;    for (int i = 0; i &lt; n; i++) &#123;        if (i == x - 1) cout &lt;&lt; y &lt;&lt; &quot; &quot;;        cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;    return 0;&#125;</code></pre><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/17/u198288-solution/">https://ren-yc.github.io/2022/01/17/u198288-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - U198094 前 n 个偶数位回文数之和</title>
      <link href="/2022/01/16/u198094-solution/"/>
      <url>/2022/01/16/u198094-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>此题为私有题目</strong></p><h3 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个正整数 $n$，输出前 $n$ 个偶回文数之和。</p><p>偶回文数：</p><ul><li>有偶数个数位的回文数，如：$11, 22$。</li></ul><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行一个正整数 $n$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一行一个正整数，表示前 $n$ 个偶回文数之和。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>3</code></pre><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h5><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code>66</code></pre><h4 id="提示说明"><a href="#提示说明" class="headerlink" title="提示说明"></a>提示说明</h4><p>对于 $100\%$ 的数据：</p><p>$1$ $\le$ $n$ $\le$ $100$</p><p>Idea：250lht</p><p>Solution：任宇宸</p><p>Code：任宇宸</p><p>Data：任宇宸</p><h4 id="题目难度"><a href="#题目难度" class="headerlink" title="题目难度"></a>题目难度</h4><p>$\textcolor{red}{入门}$</p><h4 id="题目地址（可能变更）"><a href="#题目地址（可能变更）" class="headerlink" title="题目地址（可能变更）"></a>题目地址（可能变更）</h4><p><a href="https://www.luogu.com.cn/problem/U198094">洛谷</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道回文数 $+$ 字符串 &amp; 整数的转换题。</p><p>我们只需写一个整数转换字符串、判断整数位数为偶数和判断字符串回文的函数即可。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><code>int_to_string</code> 是<del>网上抄的</del>模板函数。<del>当然在 Python 中直接 <code>str()</code> 就可以转换</del>（可能有些不必要的如判断负数的多余内容）</p><p><code>huiwen</code> 是判断回文字符串的函数。</p><p><code>weishu</code> 是判断整数位数是否为偶数的函数。</p><p><code>main</code> 里面就按照题目模拟即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;void int_to_string(char s[], int m) &#123;    int i = 0, k, n;    char temp;    if (m &lt; 0) &#123;        s[i] = &#39;-&#39;;        m = -m;        i++;    &#125;    while (m &gt; 0) &#123;        n = m % 10;        m /= 10;        s[i] = n + &#39;0&#39;;        i++;    &#125;    s[i] = &#39;\0&#39;;    if (s[0] == &#39;-&#39;) k = 1;    else k = 0;    for (int j = k; j &lt; i / 2; j++) &#123;        temp = s[j];        s[j] = s[i - j - 1 + k];        s[i - j - 1 + k] = temp;    &#125;&#125;bool huiwen(int g) &#123;    int i, j;    char b[101] = &#123;0&#125;;    int_to_string(b, g);    for (i = 0, j = strlen(b) - 1; i &lt; j; i++, j--) &#123;        if (b[i] != b[j]) return false;    &#125;    if (i == j) return false;    return true;&#125;bool weishu(int x) &#123;    int cnt = 0;    while (x != 0) &#123;        x /= 10;        cnt++;    &#125;    return cnt % 2 == 0;&#125;int main() &#123;    long long n, i = 1, sum = 0;    cin &gt;&gt; n;    while (n != 0) &#123;        if (weishu(i) &amp;&amp; huiwen(i)) &#123;            n--;            sum += i;        &#125;        i++;    &#125;    cout &lt;&lt; sum &lt;&lt; endl;    return 0;&#125;</code></pre><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/16/u198094-solution/">https://ren-yc.github.io/2022/01/16/u198094-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - U </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10041 Vito&#39;s Family</title>
      <link href="/2022/01/11/uva10041-solution/"/>
      <url>/2022/01/11/uva10041-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10041">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10041">UVa Online Judge</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><a href="https://www.runoob.com/python/python-lists.html">Python 中列表（数组）的基本使用</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定每个点所在的位置，求任意一个点到其他点的最短路程和。（点都在一条直线上）</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>$\because$ 多个点直接中位数点距离各个点的距离和最短</p><p>$\therefore$ 编写代码求中位数即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>献上<del>简洁的</del> Python 3 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">n = int(input())#记得强转for _ in range(n):#可以变成 while n &gt; 0:...n -= 1    b = list(map(int, input().split()))#Python 的独特输入方式    del b[0]#对于 Python 来说第一个数据没用    b.sort()#排序    s = 0#定义并清零    c = b[len(b) // 2]#中位数，&#39;//&#39; 为整除    for i in range(len(b)):#默认由 0 至 len(b)        s += abs(c - b[i])#计算距离    print(s)#输出总和</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva10041">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva10041-solution/">https://ren-yc.github.io/2022/01/11/uva10041-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA465 Overflow</title>
      <link href="/2022/01/11/uva465-solution/"/>
      <url>/2022/01/11/uva465-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA465">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/465">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定两个正整数和两数之间的符号，为 $+$ 或 $\times$。</p><p>判断这两个数中的一个数或者运算结果是否大于 <code>int</code> 范围。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>众所周知，<code>int</code> 的范围是 $2^{31} - 1$ 即 $2147483647$，本题使用 C++ 大概率会导致 <code>int</code> 溢出，也有小概率会导致 <code>unsigned long long</code> 溢出。</p><p><strong>这时候，我们就需要 Python 了！！！</strong><img src="https://图.tk/a" alt=""><img src="https://图.tk/a" alt=""><img src="https://图.tk/a" alt=""></p><p>这样一来就好办了，可以一直输入直到 <code>End Of File</code>，并判断，写一个 <code>while True</code> 就解决了。</p><p>本题使用 Python 解题的难点是<strong>如何判断 EOF？</strong></p><p>众所周知，Python 有着一堆 <code>Error</code> 类，一不小心就会引发并终止程序，在 OJ 上显示为 RE，所以很难判断具体为哪个错误类。</p><p>Python 不像 C++ 一样可以直接用 <code>!= EOF</code> 判断输入是否为 EOF，需要用 <code>try except</code> 语句实现。</p><p>本题坑点（<strong>英语好的人自动跳过</strong>）：</p><p>一个输入可以输出 $0 \sim 3$ 行判断，不是固定输出一行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>献上简洁的 Python 代码：</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">import sys#可把 break 换成 sys.exit()MAX = 2147483647#2^31-1while True:#无限循环直到 EOFError    try:#try ... except ...        s = input()#尝试输入    except EOFError:#如果引发错误        break#结束程序，也可使用 sys.exit()    print(s)    l = list(s.split())#列表存储    if int(l[0]) &gt; MAX:#注意转换类型        print(&quot;first number too big&quot;)    if int(l[2]) &gt; MAX:#可以两个数都超 int，用 if        print(&quot;second number too big&quot;)    if l[1] == &quot;+&quot; and int(l[0]) + int(l[2]) &gt; MAX:#注意有两个条件        print(&quot;result too big&quot;)    elif l[1] == &quot;*&quot; and int(l[0]) * int(l[2]) &gt; MAX:#if 也可以        print(&quot;result too big&quot;)</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva465">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva465-solution/">https://ren-yc.github.io/2022/01/11/uva465-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11727 Cost Cutting</title>
      <link href="/2022/01/11/uva11727-solution/"/>
      <url>/2022/01/11/uva11727-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11727">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11727">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定 $3$ 个整数，求中间数。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>循环输入 $3$ 个数（<strong>循环值从 $1$ 开始</strong>），再存入列表（数组），输出排序后的列表的第 $2$ 项值（即中间数）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Python 代码简洁又明了。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">t = int(input())#注意默认输入为字符串，要强制类型转换for i in range(1, t + 1):#由 1 开始    a, b, c = map(int, input().split())#Python 无法一行直接输入多个值    l = [a, b, c]#存入    l.sort()#排序    print(&quot;Case &quot; + str(i) + &quot;: &quot; + str(l[1]))#非字符串无法合并，所以要强制类型转换</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11727">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva11727-solution/">https://ren-yc.github.io/2022/01/11/uva11727-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - SP7733 HPYNOS - Happy Numbers I</title>
      <link href="/2022/01/11/sp7733-solution/"/>
      <url>/2022/01/11/sp7733-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/SP7733">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/spoj/7733">Sphere online judge</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Happy Number 的分裂规则是<strong>每次分裂的都不同</strong>，<strong>最终分裂成</strong> $1$，如果重复输出 $-1$。</p><p>直接按照题意模拟即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Python 的代码极度简洁:</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">import sys#退出程序用到的模块a = []#数组初始化cnt = 0#次数归零n = int(input())#切记int()，默认输入字符串while True:#无限循环直到退出    s = 0#归零    m = n#临时变量    while m &gt; 0:#m的位数次        x = m % 10#取模        s += x * x        m //= 10#整除    cnt += 1#次数    if s == 1:#和为1        print(cnt)#输出次数        sys.exit(0)#退出    a.append(s)#在末尾添加    n = s#更新    for i in range(0, len(a) - 1):#不包括当前的        if a[i] == s:#重复            print(-1)            sys.exit(0)#退出，相当于 CPP return 0;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-sp7733">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/sp7733-solution/">https://ren-yc.github.io/2022/01/11/sp7733-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - SP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA12503 Robot Instructions</title>
      <link href="/2022/01/11/uva12503-solution/"/>
      <url>/2022/01/11/uva12503-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA12503">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/12503">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>一只机器人站在一条线的零点，<code>LEFT</code> 命令使它向左走一格，<code>RIGHT</code> 命令则是向右走一格，求机器人最终所在的位置。</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>我们可以定义一个 $a$ 数组，用于存放命令，且只能有 $-1$ 和 $1$ 两个值，分别代表往左和往右。</p><p>读入的话可以写一个函数，使用 Python 数组的 <code>append</code> 函数在数组末尾追加数值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>详细解释在注释中。</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">a = []def f(c):#输入函数    if c == &quot;LEFT&quot;:#判断        a.append(-1)#追加        return -1    elif c == &quot;RIGHT&quot;:        a.append(1)#追加        return 1    else:        a.append(a[int(c) - 1])#追加        return a[-1]t = int(input())for _ in range(t):#循环    m = int(input())#输入    a = []#清空数组    now = 0#清零    for i in range(m):        k = list(input().split())        if len(k) == 1:            now += f(k[0])#移动        else:            now += f(k[2])#同上    print(now)#输出</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva12503">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva12503-solution/">https://ren-yc.github.io/2022/01/11/uva12503-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA10035 Primary Arithmetic</title>
      <link href="/2022/01/11/uva10035-solution/"/>
      <url>/2022/01/11/uva10035-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA10035">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/10035">UVa Online Judge</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定两个整数，请你求两数相加时进位的个数。$^*$</p><p>$^*$ 上文为转载: <a href="https://keaidexiaoyu.blog.luogu.org/solution-uva10035">https://keaidexiaoyu.blog.luogu.org/solution-uva10035</a></p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong><a href="https://blog.csdn.net/cjx14060307101/article/details/103168330">Python 3 中的各种赋值运算符</a></strong></p><h3 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h3><p>由于使用的是 Python，无法使用 <code>while (cin &gt;&gt; a &gt;&gt; b)</code>，我们可以先套一层 <code>while True</code>，遇到 $a, b = 0$ 直接 <code>break</code>，由于 $a, b \le 10^{10}$，所以我们写一个循环 $10$ 次的 <code>for i in range(10)</code> 判断每一位的进位情况：</p><ul><li><p>如果 $&gt; 9$ 计数器加一；</p></li><li><p>其他情况 计数器不变。</p></li></ul><p>我们可以使用 <code>//=</code>，用于把 $a, b$ 都减少一位。</p><p>输出就不讲了，只有一个关键点：C++ 的 <code>else if</code> 在 Python 中为 <code>elif</code>，并且他们不是函数而是关键字，可以不带括号。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>不需要导入任何模块</p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-python">while True:    a, b = map(int, input().split())    cnt = 0    if (a == 0 and b == 0):      break    c = 0    for i in range(10):      c = a % 10 + b % 10 + c      if c &gt; 9:        c = 1      else:        c = 0      cnt += c      a //= 10      b //= 10    if cnt == 0:      print(&quot;No carry operation.&quot;)    elif cnt == 1:      print(&quot;%d carry operation.&quot; % cnt)    else:      print(&quot;%d carry operations.&quot; % cnt)#毒（jian）瘤（dan）的输出格式</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva10035">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/uva10035-solution/">https://ren-yc.github.io/2022/01/11/uva10035-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF550A Two Substrings</title>
      <link href="/2022/01/11/cf550a-solution/"/>
      <url>/2022/01/11/cf550a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF550A">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/550/A">Codeforces</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题很简单，用一个字符串代替原来输入的字符串，把 <code>BA</code> 和 <code>AB</code> 用 <code>.</code> 代替。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;    string s;    cin &gt;&gt; s;    int AB = s.find(&quot;AB&quot;);//定义&quot;AB&quot;的位置    int BA = s.find(&quot;BA&quot;);//定义&quot;BA&quot;的位置    if (AB != -1) &#123;        string temp = s;//定义临时字符串temp        temp.replace(AB, 2, &quot;.&quot;);//用&quot;.&quot;代替        int BA = temp.find(&quot;BA&quot;);        if (BA != -1) &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;//如果没有输出YES            return 0;//结束程序        &#125;    &#125;    if (BA != -1) &#123;//同上        string temp = s;        temp.replace(BA, 2,&quot;.&quot;);        int AB = temp.find(&quot;AB&quot;);        if (AB != -1) &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;            return 0;        &#125;    &#125;    cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;//如果都没有找到输出NO    return 0;//华丽结束&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf550a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf550a-solution/">https://ren-yc.github.io/2022/01/11/cf550a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF268A Games</title>
      <link href="/2022/01/11/cf268a-solution/"/>
      <url>/2022/01/11/cf268a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF268A">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/268/A">Codeforces</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>球队间打比赛，分主场和客场，要求一场比赛中两支队伍服装不能相同，求满足条件的场数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力枚举。</p><p>详细解析见下注释。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头using namespace std;int main() &#123;    int n, a[101] = &#123;0&#125;, b[101] = &#123;0&#125;, cnt = 0;    cin &gt;&gt; n;//输入场数    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; a[i] &gt;&gt; b[i];//输入两支队伍服装的颜色    &#125;    for (int i = 0; i &lt; n; i++) &#123;//枚举        for (int j = 0; j &lt; n; j++) &#123;            if (a[i] == b[j]) cnt++;//计数器自增        &#125;    &#125;    cout &lt;&lt; cnt &lt;&lt; endl;//输出计数器    return 0;//好习惯&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf268a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf268a-solution/">https://ren-yc.github.io/2022/01/11/cf268a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1475A Odd Divisor</title>
      <link href="/2022/01/11/cf1475a-solution/"/>
      <url>/2022/01/11/cf1475a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1475A">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1475/A">Codeforces</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>判断一个数能否被一个大于 $1$ 的数整除。</p><p>我们最先想到能一直除以 $2$，如果余数为 $1$，那么输出 <code>NO</code>，否则输出 <code>YES</code>。</p><p>还要注意一点 $n$ 的范围是 $10$ 的 $14$ 次方，$\mathrm{INT}$_$\mathrm{MAX} \approx 10^9$，所以要用 <code>long long</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    long long t, n;    cin &gt;&gt; t;    for (int i = 1; i &lt;= t; i++) &#123;        cin &gt;&gt; n;        while (n % 2 == 0) &#123;            n /= 2;        &#125;        if (n == 1) &#123;            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf1475a">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2022/01/11/cf1475a-solution/">https://ren-yc.github.io/2022/01/11/cf1475a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF1598A Computer Game</title>
      <link href="/2021/10/11/cf1598a-solution/"/>
      <url>/2021/10/11/cf1598a-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF1598A">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/1598/A">Codeforces</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>给定两行字符串，求能否从左上角走到右下角（<code>0</code> 为可走，<code>1</code> 为不可走）。<strong><del>（超简洁翻译）</del></strong></p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>我们可以读入完字符串后循环遍历，两两比较，如果有 $s1_i = s2_i$，说明无法通过，则 $flag = true$（也可以输出后直接 <code>continue</code>）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁！using namespace std;int main() &#123;    int t;    cin &gt;&gt; t;    while (t--) &#123;//几乎每道 CF 题都要        int n;        bool flag = false;        string a, b;//不使用 char 数组（复杂、麻烦）        cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;        for (int i = 0; i &lt; n; i++) &#123;            if (a[i] == &#39;1&#39; &amp;&amp; b[i] == &#39;1&#39;) &#123;//两行都为 1                flag = true;//发现            &#125;        &#125;        if (flag == 0) &#123;//若未发现            cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;        &#125; else &#123;//否则            cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf1598a">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120711294">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/11/cf1598a-solution/">https://ren-yc.github.io/2021/10/11/cf1598a-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - CF44B Cola</title>
      <link href="/2021/10/06/cf44b-solution/"/>
      <url>/2021/10/06/cf44b-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/CF44B">洛谷</a></p><p><a href="https://codeforces.com/problemset/problem/44/B">Codeforces</a></p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>本题第一眼可以看出是一道暴力枚举，但是不能用三层 <code>for</code> 循环，$100\%$ 超时。</p><p>所以我们可以先从 $2$ 升的可乐开始循环，通过前两个循环来推算出 $0.5$ 升可乐的数量。</p><p><strong>注意：本题的 $a$ 为 $0.5$ 而 $n$ 为整型，第一层循环要两个两个加</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//懒人专用using namespace std;int main() &#123;    int n, a, b, c, ans = 0;    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;    for (int i = 0; i &lt;= a; i += 2) &#123;//n 必须是整数，但 a 是 0.5 升，所以两个两个加        for (int j = 0; j &lt;= c; j++) &#123;            if (n - (i / 2 + j * 2) &lt;= b &amp;&amp; n - (i / 2 + j * 2) &gt;= 0) &#123;//算总量并判断是否小于等于 b 和 n                ans++;            &#125;        &#125;    &#125;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-cf44b">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120628543">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/10/06/cf44b-solution/">https://ren-yc.github.io/2021/10/06/cf44b-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - CF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA11559 Event Planning</title>
      <link href="/2021/09/14/uva11559-solution/"/>
      <url>/2021/09/14/uva11559-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA11559">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/11559">UVa Online Judge</a></p><h3 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h3><p>作为一次短途旅行的组织者，你需要根据参与人数、预算、酒店及其周末空余床位的情况，决定是否成行。其中旅游人数 $N$，预算 $B$，可供考虑的酒店数量 $H$，可选择的出行周末 $W$。其中 $H$ 确定之后，会输入 $H$ 组数据，每两行为一组，第一行表示该酒店的人均住店费用 $p$，第二行表示 $W$ 个周末对应每个周末该酒店的床位空余情况 $a$。</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>本题很明显就能看出是一道模拟题。</p><p>只需要在输入的时候顺便计算一下是否超预算。如果有，则顺便记录下是否是更低的预算即可。如果都超预算，那么输出 <code>stay home</code>，否则就输出记录的那个更低的预算。</p><p><strong>一般 UVA 的题读入行数是不给定的，所以我们要使用</strong> <code>while (cin &gt;&gt; n)</code> <strong>或者</strong> <code>while (~scanf(&quot;%d&quot;, &amp;n))</code><strong>。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;//万能头万岁using namespace std;int main() &#123;    int N, B, H, W, p, a, Min = INT_MAX;//Min 根据个人喜好设置较大数    while (cin &gt;&gt; N &gt;&gt; B &gt;&gt; H &gt;&gt; W) &#123;//如果是 scanf 可以加上 != EOF        for (int i = 0; i &lt; H; i++) &#123;            cin &gt;&gt; p;            for (int j = 0; j &lt; W; j++) &#123;                cin &gt;&gt; a;                if (a &gt;= N) Min = min(Min, p * N);//读入时求最小值            &#125;        &#125;        if (Min &lt;= B) &#123;            cout &lt;&lt; Min &lt;&lt; endl;        &#125; else &#123;            cout &lt;&lt; &quot;stay home&quot; &lt;&lt; endl;        &#125;        Min = INT_MAX;//根据个人喜好    &#125;    return 0;&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva11559">洛谷博客</a> 和 <a href="https://blog.csdn.net/Renyuchen_/article/details/120657641">CSDN 博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/09/14/uva11559-solution/">https://ren-yc.github.io/2021/09/14/uva11559-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』Luogu - UVA13012 Identifying tea</title>
      <link href="/2021/08/23/uva13012-solution/"/>
      <url>/2021/08/23/uva13012-solution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://www.luogu.com.cn/problem/UVA13012">洛谷</a></p><p><a href="https://www.luogu.com.cn/remoteJudgeRedirect/uva/13012">UVa Online Judge</a></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p><del>太淼了</del>，一道模拟题。</p><p>一般 UVA 的题读入行数是不给定的，所以我们要使用 <code>while (cin &gt;&gt; n)</code> 或者 <code>while (~scanf(&quot;%d&quot;, &amp;n))</code>。</p><p>每次循环读入后，使用 <code>if</code> 判断这 $5$ 个数是否等于 $t$。如果是，计数器加一。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p class="code-caption" data-lang="cpp" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy=""><span class="code-caption-label"></span></p><pre><code class="lang-cpp">#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123;    int t, a, b, c, d, e;    while (cin &gt;&gt; t &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e) &#123;//不停地读入（由于是cin,所以不用!=EOF）        int ans = 0;//计数器        if (a == t) ans++;//判断        if (b == t) ans++;//同上        if (c == t) ans++;//同上        if (d == t) ans++;//同上        if (e == t) ans++;//同上（草）        cout &lt;&lt; ans &lt;&lt; endl;    &#125;    return 0;//完结撒花&#125;</code></pre><p><strong>本文章同时发布在 <a href="https://www.luogu.com.cn/blog/yuchenren/solution-uva13012">洛谷博客</a></strong></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/23/uva13012-solution/">https://ren-yc.github.io/2021/08/23/uva13012-solution/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Solution - UVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『教程』如何使（po）用（jie） IDM</title>
      <link href="/2021/08/12/how-to-use-idm/"/>
      <url>/2021/08/12/how-to-use-idm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文章所使用的方法保证在 IDM 6.xx 版本有效</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>众所周知</del>，IDM 是一个很好的<strong>多线程</strong>下载工具，还支持网站爬取音视频。</p><p>IDM 能够在使用浏览器下载文件时自动捕获下载链接并添加下载任务，目前，IDM 的自动捕获功能支持以下常见的主流浏览器：</p><p>Safari</p><p>Chrome</p><p>Firefox</p><p>Opera</p><p>Microsoft Edge</p><p>Internet Explorer</p><p><del>_我很严肃_：</del></p><p><del>_IDM 破解是怎么回事呢？IDM 相信大家都很熟悉，但是 IDM 破解是怎么回事呢，下面就让小编带大家一起了解吧。IDM 破解，其实就是破解，大家可能会很惊讶 IDM 怎么破解呢？但事实就是这样，小编也感到非常惊讶。这就是关于 IDM 破解的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！_</del></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先安装正版 IDM，再使用破解工具破解。</p><p><a href="http://www.internetdownloadmanager.com/download.html">IDM 官网下载</a></p><p><a href="/assets/IDM/IDMInstall.zip">本站安装程序压缩包下载</a></p><p><a href="/assets/IDM/IDMPatch.zip">本站破解工具压缩包下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行下载的 <code>.exe</code> 文件，</p><p>安装时一直按 Enter 就行，</p><p>若安装程序提示重启，</p><p><strong>请点击 “取消”</strong>。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>把下载的 <code>IDMPatch.zip</code> 中的 <code>Crack.exe</code> 复制到 IDM 安装目录如 <code>C:\Program Files (x86)\Internet Download Manager</code>，</p><p>右键该文件，</p><p>选择 “<strong>以管理员模式运行</strong>”。</p><p>执行完毕后运行 <code>REG.exe</code>，</p><p><strong>方法同上</strong>。</p><p>然后启动 IDM，</p><p>点击菜单栏中的 “帮助” — “关于 IDM”，</p><p>可以看到 IDM 被成功的激活了<img src="https://啧.tk/gx" alt=""></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/12/how-to-use-idm/">https://ren-yc.github.io/2021/08/12/how-to-use-idm/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APPs - Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『教程』WFR &amp; RBQ - 如何使用 Warfarin &amp; RBQScript</title>
      <link href="/2021/08/05/how-to-use-wfr-and-rbq/"/>
      <url>/2021/08/05/how-to-use-wfr-and-rbq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md">帮助文档 &amp; Wiki</a></p><p>Warfarin 是一个由 C++ 编写而成的<strong>解释型</strong>语言。</p><p>RBQScript 是一个由 C++ 编写而成的<strong>编译型</strong>语言。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>变量，支持数字、字符串、布尔、数组（允许使用 <code>a[&quot;test&quot;]</code> 这样的语法）；</p></li><li><p>函数定义、调用与递归、高阶函数、<code>lambda</code> 表达式；</p></li><li><p>键盘与文件的 I/O 操作；</p></li><li><p><code>if for while</code> 语句；</p></li><li><p>大量内置函数，以及一部分操作系统 API（仅支持Windows）；</p></li><li><p>点语法操作，即 <code>a.test</code> 等价于 <code>a[&quot;test&quot;]</code>；</p></li><li><p>编译成特定格式的 <code>.ff0</code> / <code>.rbq</code> 文件，支持 <code>import</code>；</p></li><li><p>支持伪代码和普通代码混写 （打开 <code>-p</code> 开关）；</p></li><li><p>支持反编译成 JavaScript（一部分内置函数不会给出对应的实现）；</p></li><li><p>支持 DLL 文件调用。</p></li><li><p><strong>支持自动更新 不需要手动下载新版本的代码，程序会自动检查并更新源代码。（仅限 3.30+ 版本）</strong></p></li><li><p>全新 Warfarin 语言编写数学库（<code>algorithm.wfr</code>）</p></li></ul><p>具体信息请看<a href="https://github.com/WarfarinBloodanger/ff0-script/blob/main/readme.md">这里（Warfarin）</a> 或 <a href="https://github.com/WarfarinBloodanger/rbqscript/blob/main/README.md">这里（RBQScript）</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Warfarin 目前最新版本：<strong>4.01</strong>（已停止更新，变更为 RBQScript 继续更新）</p><p>RBQScript 目前最新版本：<strong>4.12</strong></p><h3 id="下载-amp-配置"><a href="#下载-amp-配置" class="headerlink" title="下载 &amp; 配置"></a>下载 &amp; 配置</h3><p>$1.$ <strong>下载</strong> Warfarin（RBQScript） C++ 源文件，</p><p>$2.$ 使用 g++ 编译成 exe 文件，</p><p>$3.$ <strong>把 exe 文件加入环境变量</strong>（不会的请百度）。</p><h3 id="编译-amp-运行"><a href="#编译-amp-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h3><p>运行程序有 $2$ 种方法：</p><ul><li><p>直接运行 <code>Warfarin.exe</code> / <code>fvm.exe</code></p></li><li><p>编译运行 <code>.wfr</code> / <code>.rbq</code> 源文件（请看下文）</p></li></ul><p>Warfarin（RBQScript） 的源文件扩展名一般为 <code>.wfr</code> / <code>.rbq</code>，</p><p>使用 <code>Warfarin.exe</code> / <code>fvm.exe</code> 编译时请在该文件夹下的命令行输入 <code>Warfarin 文件名 -cr/crj/crjp</code> / <code>fvm -i 文件名 -cr/crj/crjp (-o 文件名.rbq)</code>，</p><p>此命令会编译出一个 <code>.ff0</code> / <code>.rbq</code> 字节码文件，相当于 C++ 的 <code>.exe</code> 文件，<del>但不能双击运行</del>，请<strong>不要删除</strong>。</p><p>关于 <code>cr/crj/crjp</code> $3$ 个编译参数请看<a href="https://www.luogu.com.cn/blog/Warfarin/ff0-faq">此处</a>。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="/assets/ff0/Warfarin.zip">本站下载链接（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/ff0-script">作者 GitHub 仓库（Warfarin）</a></p><p><a href="https://github.com/WarfarinBloodanger/rbqscript">作者 GitHub 仓库（RBQScript）</a></p><p><a href="https://raw.githubusercontent.com/WarfarinBloodanger/ff0-script/main/user.txt">英文帮助文档</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ren-yc.vscode-warfarin">VSCode 插件（仅支持基础语言设置，咕咕）</a></p><blockquote><p>本文作者: Yuchen Ren<br>本文链接:  <a href="https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/">https://ren-yc.github.io/2021/08/05/how-to-use-wfr-and-rbq/</a><br>版权声明: 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="/assets/img/by-nc-sa4.0.png" alt="CC-BY-NC-SA 4.0"></a> 许可协议。转载请注明出处!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming Languages - Warfarin &amp; RBQScript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
